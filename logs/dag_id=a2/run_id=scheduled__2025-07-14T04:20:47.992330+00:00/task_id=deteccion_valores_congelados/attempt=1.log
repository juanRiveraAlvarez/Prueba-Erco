{"timestamp":"2025-07-14T04:20:49.360676","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T04:20:49.361152","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T04:20:49.401930Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.402158Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.402260Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.402355Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.382178","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T04:20:49.434120Z","level":"info","event":"        id  device_id           timestamp   value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.434410Z","level":"info","event":"0    47658          1 2025-07-07 17:15:00  220.76   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.434589Z","level":"info","event":"1    47659          1 2025-07-07 17:30:00  221.03   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.434748Z","level":"info","event":"2    47660          1 2025-07-07 17:45:00  221.35   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.434907Z","level":"info","event":"3    48022          2 2025-07-07 17:15:00  221.72   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.435059Z","level":"info","event":"4    48023          2 2025-07-07 17:30:00  221.90   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.435209Z","level":"info","event":"..     ...        ...                 ...     ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.435399Z","level":"info","event":"295  83331         99 2025-07-07 17:30:00  225.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.435554Z","level":"info","event":"296  83332         99 2025-07-07 17:45:00  225.66   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.435703Z","level":"info","event":"297  83694        100 2025-07-07 17:15:00  210.18   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.435851Z","level":"info","event":"298  83695        100 2025-07-07 17:30:00  210.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.435999Z","level":"info","event":"299  83696        100 2025-07-07 17:45:00  210.67   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.436149Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.436298Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.442305Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.443034","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T04:20:49.467206Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.467474Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T04:20:49.467576Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
