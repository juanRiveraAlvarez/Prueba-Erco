{"timestamp":"2025-07-13T00:13:39.782941","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:13:39.784092","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:13:39.834912Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.835158Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.835314Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.835465Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.819238","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:13:39.913954Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.914202Z","level":"info","event":"0    231484          1 2025-07-08 08:30:00   0.38   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.914354Z","level":"info","event":"1    231584          1 2025-07-08 08:45:00   0.36   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.914499Z","level":"info","event":"2    231684          1 2025-07-08 09:00:00   0.42   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.914640Z","level":"info","event":"3    231485          2 2025-07-08 08:30:00   0.66   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.914780Z","level":"info","event":"4    231585          2 2025-07-08 08:45:00   0.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.914916Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.915050Z","level":"info","event":"295  231682         99 2025-07-08 08:45:00   0.39   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.915180Z","level":"info","event":"296  231782         99 2025-07-08 09:00:00   0.62   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.915315Z","level":"info","event":"297  231583        100 2025-07-08 08:30:00   0.62   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.915453Z","level":"info","event":"298  231683        100 2025-07-08 08:45:00   0.68   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.915586Z","level":"info","event":"299  231783        100 2025-07-08 09:00:00   0.49   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.915712Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.915843Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.927811Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.928673","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:13:39.958266Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.958502Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:13:39.958652Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
