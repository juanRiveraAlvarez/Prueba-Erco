{"timestamp":"2025-07-14T01:35:36.601955","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:35:36.605148","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:35:36.664302Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.664567Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.664729Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.664877Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.634551","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:35:36.714009Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.714232Z","level":"info","event":"0    40501          1 2025-07-08 16:15:00   0.56   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.714349Z","level":"info","event":"1    40601          1 2025-07-08 16:30:00   0.28   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.714459Z","level":"info","event":"2    40701          1 2025-07-08 16:45:00   0.30   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.714571Z","level":"info","event":"3    40502          2 2025-07-08 16:15:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.714677Z","level":"info","event":"4    40602          2 2025-07-08 16:30:00   0.32   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.714782Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.714887Z","level":"info","event":"295  40699         99 2025-07-08 16:30:00   0.47   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.714992Z","level":"info","event":"296  40799         99 2025-07-08 16:45:00   0.29   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.715096Z","level":"info","event":"297  40600        100 2025-07-08 16:15:00   0.69   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.715201Z","level":"info","event":"298  40700        100 2025-07-08 16:30:00   0.47   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.715332Z","level":"info","event":"299  40800        100 2025-07-08 16:45:00   0.51   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.715439Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.715535Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.726769Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.727671","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:35:36.752433Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.752672Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:35:36.752820Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
