{"timestamp":"2025-07-14T02:03:37.380975","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:03:37.381858","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:03:37.434311Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.434582Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.434750Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.434904Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.416656","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:03:37.520400Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.520693Z","level":"info","event":"0    43301          1 2025-07-09 10:30:00   0.70   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.520860Z","level":"info","event":"1    43401          1 2025-07-09 10:45:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.521021Z","level":"info","event":"2    43501          1 2025-07-09 11:00:00   1.06   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.521169Z","level":"info","event":"3    43302          2 2025-07-09 10:30:00   1.27   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.521320Z","level":"info","event":"4    43402          2 2025-07-09 10:45:00   1.03   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.521467Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.521623Z","level":"info","event":"295  43499         99 2025-07-09 10:45:00   1.22   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.521766Z","level":"info","event":"296  43599         99 2025-07-09 11:00:00   1.18   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.521912Z","level":"info","event":"297  43400        100 2025-07-09 10:30:00   1.10   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.522069Z","level":"info","event":"298  43500        100 2025-07-09 10:45:00   0.59   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.522221Z","level":"info","event":"299  43600        100 2025-07-09 11:00:00   0.71   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.522373Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.522633Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.535577Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.535774","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:03:37.583774Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.584034Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:03:37.584193Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
