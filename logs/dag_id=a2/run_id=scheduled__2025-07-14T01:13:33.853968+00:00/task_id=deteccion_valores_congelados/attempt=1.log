{"timestamp":"2025-07-14T01:13:36.121256","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:13:36.122188","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:13:36.188423Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.188708Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.188891Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.189064Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.160785","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:13:36.253782Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.254077Z","level":"info","event":"0    38301          1 2025-07-08 10:45:00   1.04   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.254238Z","level":"info","event":"1    38401          1 2025-07-08 11:00:00   0.57   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.254383Z","level":"info","event":"2    38501          1 2025-07-08 11:15:00   0.63   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.254534Z","level":"info","event":"3    38302          2 2025-07-08 10:45:00   0.59   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.254672Z","level":"info","event":"4    38402          2 2025-07-08 11:00:00   0.69   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.254802Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.254934Z","level":"info","event":"295  38499         99 2025-07-08 11:00:00   0.54   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.255065Z","level":"info","event":"296  38599         99 2025-07-08 11:15:00   1.44   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.255205Z","level":"info","event":"297  38400        100 2025-07-08 10:45:00   0.54   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.255371Z","level":"info","event":"298  38500        100 2025-07-08 11:00:00   1.01   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.255498Z","level":"info","event":"299  38600        100 2025-07-08 11:15:00   0.96   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.255627Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.255755Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.274941Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.274961","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:13:36.310928Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.311205Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:13:36.311404Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
