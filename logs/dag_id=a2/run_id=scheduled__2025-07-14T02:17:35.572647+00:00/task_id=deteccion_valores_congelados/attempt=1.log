{"timestamp":"2025-07-14T02:17:36.855074","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:17:36.855764","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:17:36.901299Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.901571Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.901736Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.901892Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.881642","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:17:36.964397Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.964596Z","level":"info","event":"0    44701          1 2025-07-09 14:00:00   0.53   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.964695Z","level":"info","event":"1    44801          1 2025-07-09 14:15:00   0.45   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.964786Z","level":"info","event":"2    44901          1 2025-07-09 14:30:00   0.52   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.964876Z","level":"info","event":"3    44702          2 2025-07-09 14:00:00   0.88   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.964963Z","level":"info","event":"4    44802          2 2025-07-09 14:15:00   0.60   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.965048Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.965132Z","level":"info","event":"295  44899         99 2025-07-09 14:15:00   0.54   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.965215Z","level":"info","event":"296  44999         99 2025-07-09 14:30:00   1.19   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.965297Z","level":"info","event":"297  44800        100 2025-07-09 14:00:00   1.17   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.965379Z","level":"info","event":"298  44900        100 2025-07-09 14:15:00   0.59   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.965463Z","level":"info","event":"299  45000        100 2025-07-09 14:30:00   0.85   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.965546Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.965630Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.976236Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:36.977245","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:17:37.006238Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:37.006494Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:17:37.006644Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
