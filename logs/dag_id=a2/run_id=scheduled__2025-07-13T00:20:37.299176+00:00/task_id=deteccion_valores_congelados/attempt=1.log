{"timestamp":"2025-07-13T00:20:39.381567","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:20:39.382314","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:20:39.439455Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.439675Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.439801Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.439921Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.410436","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:20:39.479900Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480096Z","level":"info","event":"0    231884          1 2025-07-08 09:30:00   1.05   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480189Z","level":"info","event":"1    231984          1 2025-07-08 09:45:00   0.76   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480276Z","level":"info","event":"2    232084          1 2025-07-08 10:00:00   0.87   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480362Z","level":"info","event":"3    231885          2 2025-07-08 09:30:00   0.99   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480450Z","level":"info","event":"4    231985          2 2025-07-08 09:45:00   1.06   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480559Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480673Z","level":"info","event":"295  232082         99 2025-07-08 09:45:00   0.57   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480760Z","level":"info","event":"296  232182         99 2025-07-08 10:00:00   0.93   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480852Z","level":"info","event":"297  231983        100 2025-07-08 09:30:00   0.68   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.480938Z","level":"info","event":"298  232083        100 2025-07-08 09:45:00   0.49   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.481019Z","level":"info","event":"299  232183        100 2025-07-08 10:00:00   0.64   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.481099Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.481202Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.493683Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.494501","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:20:39.527945Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.528196Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:20:39.528348Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
