{"timestamp":"2025-07-14T02:32:37.312363","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:32:37.313152","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:32:37.360973Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.361176Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.361272Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.361351Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.336558","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:32:37.418042Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418224Z","level":"info","event":"0    46001          1 2025-07-09 17:15:00   0.16   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418323Z","level":"info","event":"1    46101          1 2025-07-09 17:30:00   0.16   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418413Z","level":"info","event":"2    46201          1 2025-07-09 17:45:00   0.13   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418501Z","level":"info","event":"3    46002          2 2025-07-09 17:15:00   0.17   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418588Z","level":"info","event":"4    46102          2 2025-07-09 17:30:00   0.30   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418671Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418753Z","level":"info","event":"295  46199         99 2025-07-09 17:30:00   0.36   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418836Z","level":"info","event":"296  46299         99 2025-07-09 17:45:00   0.15   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418917Z","level":"info","event":"297  46100        100 2025-07-09 17:15:00   0.23   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.418998Z","level":"info","event":"298  46200        100 2025-07-09 17:30:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.419078Z","level":"info","event":"299  46300        100 2025-07-09 17:45:00   0.32   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.419161Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.419243Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.429492Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.430309","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:32:37.453626Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.453841Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:32:37.453973Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
