{"timestamp":"2025-07-14T02:26:37.203005","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:26:37.205196","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:26:37.266710Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.266985Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.267161Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.267343Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.248274","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:26:37.377004Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.377352Z","level":"info","event":"0    45601          1 2025-07-09 16:15:00   0.62   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.377566Z","level":"info","event":"1    45701          1 2025-07-09 16:30:00   0.61   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.377762Z","level":"info","event":"2    45801          1 2025-07-09 16:45:00   0.34   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.377959Z","level":"info","event":"3    45602          2 2025-07-09 16:15:00   0.63   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.378147Z","level":"info","event":"4    45702          2 2025-07-09 16:30:00   0.40   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.378338Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.378521Z","level":"info","event":"295  45799         99 2025-07-09 16:30:00   0.32   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.378719Z","level":"info","event":"296  45899         99 2025-07-09 16:45:00   0.42   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.378903Z","level":"info","event":"297  45700        100 2025-07-09 16:15:00   0.38   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.379084Z","level":"info","event":"298  45800        100 2025-07-09 16:30:00   0.62   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.379300Z","level":"info","event":"299  45900        100 2025-07-09 16:45:00   0.47   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.379496Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.379687Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.396662Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.398498","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:26:37.437315Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.437578Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:26:37.437741Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
