{"timestamp":"2025-07-14T02:09:37.013575","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:09:37.014351","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:09:37.062231Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.062512Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.062717Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.062862Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.042534","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:09:37.126239Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.126454Z","level":"info","event":"0    43901          1 2025-07-09 12:00:00   1.47   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.126559Z","level":"info","event":"1    44001          1 2025-07-09 12:15:00   0.58   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.126654Z","level":"info","event":"2    44101          1 2025-07-09 12:30:00   1.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.126747Z","level":"info","event":"3    43902          2 2025-07-09 12:00:00   1.01   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.126865Z","level":"info","event":"4    44002          2 2025-07-09 12:15:00   0.76   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.126983Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.127085Z","level":"info","event":"295  44099         99 2025-07-09 12:15:00   0.70   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.127177Z","level":"info","event":"296  44199         99 2025-07-09 12:30:00   1.10   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.127311Z","level":"info","event":"297  44000        100 2025-07-09 12:00:00   1.23   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.127401Z","level":"info","event":"298  44100        100 2025-07-09 12:15:00   1.31   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.127486Z","level":"info","event":"299  44200        100 2025-07-09 12:30:00   0.00   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.127570Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.127654Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.141099Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.142065","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:09:37.180742Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.180949Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:09:37.181054Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
