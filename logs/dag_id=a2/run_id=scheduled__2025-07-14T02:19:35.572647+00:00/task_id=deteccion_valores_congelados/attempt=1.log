{"timestamp":"2025-07-14T02:19:37.172228","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:19:37.173149","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:19:37.229206Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.229542Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.229726Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.229887Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.204033","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:19:37.314617Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.314872Z","level":"info","event":"0    44901          1 2025-07-09 14:30:00   0.52   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.315003Z","level":"info","event":"1    45001          1 2025-07-09 14:45:00   1.11   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.315118Z","level":"info","event":"2    45101          1 2025-07-09 15:00:00   0.86   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.315231Z","level":"info","event":"3    44902          2 2025-07-09 14:30:00   0.64   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.315392Z","level":"info","event":"4    45002          2 2025-07-09 14:45:00   1.19   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.315536Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.315679Z","level":"info","event":"295  45099         99 2025-07-09 14:45:00   0.84   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.315847Z","level":"info","event":"296  45199         99 2025-07-09 15:00:00   0.84   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.315991Z","level":"info","event":"297  45000        100 2025-07-09 14:30:00   0.85   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.316102Z","level":"info","event":"298  45100        100 2025-07-09 14:45:00   0.71   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.316206Z","level":"info","event":"299  45200        100 2025-07-09 15:00:00   0.97   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.316310Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.316414Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.332605Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.333693","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:19:37.364901Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.365150Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:19:37.365295Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
