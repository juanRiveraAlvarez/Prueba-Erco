{"timestamp":"2025-07-14T02:22:37.126225","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:22:37.126933","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:22:37.175062Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.175313Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.175452Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.175581Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.151251","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:22:37.222230Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.222418Z","level":"info","event":"0    45201          1 2025-07-09 15:15:00   0.84   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.222516Z","level":"info","event":"1    45301          1 2025-07-09 15:30:00   0.85   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.222610Z","level":"info","event":"2    45401          1 2025-07-09 15:45:00   0.39   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.222701Z","level":"info","event":"3    45202          2 2025-07-09 15:15:00   0.39   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.222788Z","level":"info","event":"4    45302          2 2025-07-09 15:30:00   0.74   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.222873Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.222959Z","level":"info","event":"295  45399         99 2025-07-09 15:30:00   0.40   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.223043Z","level":"info","event":"296  45499         99 2025-07-09 15:45:00   0.66   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.223127Z","level":"info","event":"297  45300        100 2025-07-09 15:15:00   0.75   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.223212Z","level":"info","event":"298  45400        100 2025-07-09 15:30:00   0.86   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.223324Z","level":"info","event":"299  45500        100 2025-07-09 15:45:00   0.84   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.223412Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.223498Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.230597Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.231213","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:22:37.259419Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.259823Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:22:37.260120Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
