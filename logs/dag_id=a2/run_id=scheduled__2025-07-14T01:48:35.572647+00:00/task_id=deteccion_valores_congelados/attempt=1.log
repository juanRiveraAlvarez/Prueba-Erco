{"timestamp":"2025-07-14T01:48:37.301244","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:48:37.302287","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:48:37.358006Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.358276Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.358444Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.358601Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.338730","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:48:37.451299Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.451592Z","level":"info","event":"0    41101          1 2025-07-08 17:45:00   0.32   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.451756Z","level":"info","event":"1    41901          1 2025-07-09 07:00:00   0.13   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.451901Z","level":"info","event":"2    42001          1 2025-07-09 07:15:00   0.30   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.452043Z","level":"info","event":"3    41102          2 2025-07-08 17:45:00   0.32   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.452179Z","level":"info","event":"4    41902          2 2025-07-09 07:00:00   0.18   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.452315Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.452449Z","level":"info","event":"295  41999         99 2025-07-09 07:00:00   0.39   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.452581Z","level":"info","event":"296  42099         99 2025-07-09 07:15:00   0.23   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.452711Z","level":"info","event":"297  41200        100 2025-07-08 17:45:00   0.23   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.452843Z","level":"info","event":"298  42000        100 2025-07-09 07:00:00   0.17   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.452975Z","level":"info","event":"299  42100        100 2025-07-09 07:15:00   0.19   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.453108Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.453260Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.468950Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.469981","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:48:37.516528Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.516807Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:48:37.516997Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
