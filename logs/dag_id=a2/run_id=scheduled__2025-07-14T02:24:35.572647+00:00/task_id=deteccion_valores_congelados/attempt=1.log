{"timestamp":"2025-07-14T02:24:38.218313","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:24:38.219125","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:24:38.266969Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.267240Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.267454Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.267598Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.245294","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:24:38.335319Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.335556Z","level":"info","event":"0    45501          1 2025-07-09 16:00:00   0.62   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.335668Z","level":"info","event":"1    45601          1 2025-07-09 16:15:00   0.62   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.335771Z","level":"info","event":"2    45701          1 2025-07-09 16:30:00   0.61   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.335874Z","level":"info","event":"3    45502          2 2025-07-09 16:00:00   0.51   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.335973Z","level":"info","event":"4    45602          2 2025-07-09 16:15:00   0.63   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.336070Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.336167Z","level":"info","event":"295  45599         99 2025-07-09 16:00:00   0.65   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.336264Z","level":"info","event":"296  45699         99 2025-07-09 16:15:00   0.29   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.336359Z","level":"info","event":"297  45500        100 2025-07-09 15:45:00   0.84   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.336454Z","level":"info","event":"298  45600        100 2025-07-09 16:00:00   0.73   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.336549Z","level":"info","event":"299  45700        100 2025-07-09 16:15:00   0.38   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.336645Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.336740Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.347670Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.348249","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:24:38.374676Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.374909Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:24:38.375054Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
