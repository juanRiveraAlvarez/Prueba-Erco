{"timestamp":"2025-07-14T02:27:38.367529","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:27:38.368880","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:27:38.420847Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.421348Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.421536Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.421705Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.402992","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:27:38.504719Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.505029Z","level":"info","event":"0    45801          1 2025-07-09 16:45:00   0.34   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.505243Z","level":"info","event":"1    45901          1 2025-07-09 17:00:00   0.31   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.505425Z","level":"info","event":"2    46001          1 2025-07-09 17:15:00   0.16   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.505623Z","level":"info","event":"3    45802          2 2025-07-09 16:45:00   0.32   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.505826Z","level":"info","event":"4    45902          2 2025-07-09 17:00:00   0.14   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.506012Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.506176Z","level":"info","event":"295  45899         99 2025-07-09 16:45:00   0.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.506378Z","level":"info","event":"296  45999         99 2025-07-09 17:00:00   0.35   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.506555Z","level":"info","event":"297  45800        100 2025-07-09 16:30:00   0.62   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.506733Z","level":"info","event":"298  45900        100 2025-07-09 16:45:00   0.47   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.506938Z","level":"info","event":"299  46000        100 2025-07-09 17:00:00   0.25   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.507111Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.507320Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.521351Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.522667","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:27:38.554963Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.555294Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:27:38.555512Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
