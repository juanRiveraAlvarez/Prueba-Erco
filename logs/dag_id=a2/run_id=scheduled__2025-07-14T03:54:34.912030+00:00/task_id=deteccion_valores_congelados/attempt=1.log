{"timestamp":"2025-07-14T03:54:36.557769","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T03:54:36.558509","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T03:54:36.600628Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.600837Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.600949Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.601055Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.584669","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T03:54:36.644821Z","level":"info","event":"        id  device_id           timestamp   value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645020Z","level":"info","event":"0    47658          1 2025-07-07 17:15:00  220.76   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645127Z","level":"info","event":"1    47659          1 2025-07-07 17:30:00  221.03   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645221Z","level":"info","event":"2    47660          1 2025-07-07 17:45:00  221.35   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645316Z","level":"info","event":"3    48022          2 2025-07-07 17:15:00  221.72   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645406Z","level":"info","event":"4    48023          2 2025-07-07 17:30:00  221.90   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645495Z","level":"info","event":"..     ...        ...                 ...     ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645582Z","level":"info","event":"232  75687         78 2025-07-07 17:30:00  223.86   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645670Z","level":"info","event":"233  75688         78 2025-07-07 17:45:00  224.25   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645757Z","level":"info","event":"234  75998         79 2025-07-06 17:15:00  184.72   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645844Z","level":"info","event":"235  75999         79 2025-07-06 17:30:00  185.04   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.645931Z","level":"info","event":"236  76000         79 2025-07-06 17:45:00  185.25   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.646019Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.646106Z","level":"info","event":"[237 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.657828Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.658740","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T03:54:36.683768Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.684002Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:54:36.684132Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
