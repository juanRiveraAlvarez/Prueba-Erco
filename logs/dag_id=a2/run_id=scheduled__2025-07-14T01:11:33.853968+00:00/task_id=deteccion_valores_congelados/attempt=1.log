{"timestamp":"2025-07-14T01:11:36.164745","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:11:36.165838","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:11:36.232921Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.233191Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.233357Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.233512Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.201077","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:11:36.311710Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.312011Z","level":"info","event":"0    38101          1 2025-07-08 10:15:00   0.68   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.312393Z","level":"info","event":"1    38201          1 2025-07-08 10:30:00   1.06   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.312558Z","level":"info","event":"2    38301          1 2025-07-08 10:45:00   1.04   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.312698Z","level":"info","event":"3    38102          2 2025-07-08 10:15:00   0.62   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.312829Z","level":"info","event":"4    38202          2 2025-07-08 10:30:00   1.07   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.312957Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.313092Z","level":"info","event":"295  38299         99 2025-07-08 10:30:00   0.91   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.313221Z","level":"info","event":"296  38399         99 2025-07-08 10:45:00   0.80   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.313347Z","level":"info","event":"297  38200        100 2025-07-08 10:15:00   0.94   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.313504Z","level":"info","event":"298  38300        100 2025-07-08 10:30:00   0.60   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.313660Z","level":"info","event":"299  38400        100 2025-07-08 10:45:00   0.54   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.313793Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.313918Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.328871Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.329833","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:11:36.360724Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.361018Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:11:36.361229Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
