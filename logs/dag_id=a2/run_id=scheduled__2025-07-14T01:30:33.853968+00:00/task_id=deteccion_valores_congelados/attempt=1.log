{"timestamp":"2025-07-14T01:30:35.781660","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:30:35.782531","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:30:35.833094Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.833331Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.833470Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.833588Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.815499","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:30:35.886570Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.886812Z","level":"info","event":"0    40001          1 2025-07-08 15:00:00   0.36   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.886953Z","level":"info","event":"1    40101          1 2025-07-08 15:15:00   1.06   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.887086Z","level":"info","event":"2    40201          1 2025-07-08 15:30:00   0.92   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.887221Z","level":"info","event":"3    40002          2 2025-07-08 15:00:00   0.87   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.887376Z","level":"info","event":"4    40102          2 2025-07-08 15:15:00   0.92   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.887507Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.887637Z","level":"info","event":"295  40199         99 2025-07-08 15:15:00   1.04   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.887765Z","level":"info","event":"296  40299         99 2025-07-08 15:30:00   0.73   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.887896Z","level":"info","event":"297  40100        100 2025-07-08 15:00:00   0.90   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.888026Z","level":"info","event":"298  40200        100 2025-07-08 15:15:00   0.86   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.888155Z","level":"info","event":"299  40300        100 2025-07-08 15:30:00   0.90   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.888286Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.888417Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.898413Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.899366","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:30:35.922547Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.922784Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:30:35.922926Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
