{"timestamp":"2025-07-13T00:12:08.252741","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:12:08.253698","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:12:08.300553Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.300774Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.300899Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.301023Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.282263","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:12:08.351027Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.351247Z","level":"info","event":"0    231384          1 2025-07-08 08:15:00   0.60   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.351365Z","level":"info","event":"1    231484          1 2025-07-08 08:30:00   0.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.351475Z","level":"info","event":"2    231584          1 2025-07-08 08:45:00   0.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.351586Z","level":"info","event":"3    231385          2 2025-07-08 08:15:00   0.29   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.351693Z","level":"info","event":"4    231485          2 2025-07-08 08:30:00   0.66   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.351799Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.351904Z","level":"info","event":"295  231582         99 2025-07-08 08:30:00   0.43   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.352008Z","level":"info","event":"296  231682         99 2025-07-08 08:45:00   0.39   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.352112Z","level":"info","event":"297  231483        100 2025-07-08 08:15:00   0.30   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.352217Z","level":"info","event":"298  231583        100 2025-07-08 08:30:00   0.62   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.352341Z","level":"info","event":"299  231683        100 2025-07-08 08:45:00   0.68   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.352498Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.352690Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.363645Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.364466","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:12:08.397069Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.397325Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:08.397448Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
