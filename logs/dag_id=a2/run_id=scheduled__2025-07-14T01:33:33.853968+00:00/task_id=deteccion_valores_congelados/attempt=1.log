{"timestamp":"2025-07-14T01:33:35.687892","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:33:35.688564","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:33:35.736807Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.737134Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.737412Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.737658Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.714384","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:33:35.775827Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.776116Z","level":"info","event":"0    40301          1 2025-07-08 15:45:00   1.04   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.776301Z","level":"info","event":"1    40401          1 2025-07-08 16:00:00   0.53   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.776474Z","level":"info","event":"2    40501          1 2025-07-08 16:15:00   0.56   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.776648Z","level":"info","event":"3    40302          2 2025-07-08 15:45:00   1.05   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.776816Z","level":"info","event":"4    40402          2 2025-07-08 16:00:00   0.57   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.776982Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.777146Z","level":"info","event":"295  40499         99 2025-07-08 16:00:00   0.63   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.777309Z","level":"info","event":"296  40599         99 2025-07-08 16:15:00   0.54   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.777470Z","level":"info","event":"297  40400        100 2025-07-08 15:45:00   0.77   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.777632Z","level":"info","event":"298  40500        100 2025-07-08 16:00:00   0.40   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.777794Z","level":"info","event":"299  40600        100 2025-07-08 16:15:00   0.69   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.777957Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.778118Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.784847Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.785349","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:33:35.812596Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.812787Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:33:35.812885Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
