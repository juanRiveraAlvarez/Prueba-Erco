{"timestamp":"2025-07-14T01:08:36.133407","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:08:36.136228","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:08:36.188200Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.188419Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.188536Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.188646Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.168596","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:08:36.269673Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.269913Z","level":"info","event":"0    37801          1 2025-07-08 09:30:00   0.82   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270034Z","level":"info","event":"1    37901          1 2025-07-08 09:45:00   0.85   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270147Z","level":"info","event":"2    38001          1 2025-07-08 10:00:00   0.73   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270262Z","level":"info","event":"3    37802          2 2025-07-08 09:30:00   0.58   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270370Z","level":"info","event":"4    37902          2 2025-07-08 09:45:00   0.98   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270477Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270584Z","level":"info","event":"295  37999         99 2025-07-08 09:45:00   0.98   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270708Z","level":"info","event":"296  38099         99 2025-07-08 10:00:00   0.98   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270840Z","level":"info","event":"297  37900        100 2025-07-08 09:30:00   0.48   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.270949Z","level":"info","event":"298  38000        100 2025-07-08 09:45:00   0.44   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.271053Z","level":"info","event":"299  38100        100 2025-07-08 10:00:00   0.94   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.271165Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.271302Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.286502Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.287648","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:08:36.316888Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.317145Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:08:36.317307Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
