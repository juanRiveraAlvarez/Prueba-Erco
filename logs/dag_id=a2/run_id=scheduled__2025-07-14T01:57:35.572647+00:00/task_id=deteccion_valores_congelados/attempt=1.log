{"timestamp":"2025-07-14T01:57:37.848100","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:57:37.848717","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:57:37.895879Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.896169Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.896322Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.896468Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.877157","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:57:37.961631Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.961821Z","level":"info","event":"0    42801          1 2025-07-09 09:15:00   0.52   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.961915Z","level":"info","event":"1    42901          1 2025-07-09 09:30:00   0.75   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.961998Z","level":"info","event":"2    43001          1 2025-07-09 09:45:00   0.78   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962082Z","level":"info","event":"3    42802          2 2025-07-09 09:15:00   0.37   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962162Z","level":"info","event":"4    42902          2 2025-07-09 09:30:00   0.83   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962250Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962330Z","level":"info","event":"295  42899         99 2025-07-09 09:15:00   0.36   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962408Z","level":"info","event":"296  42999         99 2025-07-09 09:30:00   0.75   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962485Z","level":"info","event":"297  42800        100 2025-07-09 09:00:00   0.64   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962562Z","level":"info","event":"298  42900        100 2025-07-09 09:15:00   4.06   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962639Z","level":"info","event":"299  43000        100 2025-07-09 09:30:00   0.70   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962717Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.962794Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.973312Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.974032","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:57:37.998656Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.998866Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:57:37.998987Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
