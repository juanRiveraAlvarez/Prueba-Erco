{"timestamp":"2025-07-14T01:53:36.923243","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:53:36.924031","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:53:36.971463Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:36.971702Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:36.971841Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:36.971976Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:36.950812","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:53:37.026216Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.026500Z","level":"info","event":"0    42301          1 2025-07-09 08:00:00   0.72   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.026653Z","level":"info","event":"1    42401          1 2025-07-09 08:15:00   0.25   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.026791Z","level":"info","event":"2    42501          1 2025-07-09 08:30:00   0.61   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.026936Z","level":"info","event":"3    42302          2 2025-07-09 08:00:00   0.70   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.027072Z","level":"info","event":"4    42402          2 2025-07-09 08:15:00   0.41   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.027205Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.027372Z","level":"info","event":"295  42499         99 2025-07-09 08:15:00   0.34   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.027511Z","level":"info","event":"296  42599         99 2025-07-09 08:30:00   0.31   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.027641Z","level":"info","event":"297  42400        100 2025-07-09 08:00:00   0.43   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.027774Z","level":"info","event":"298  42500        100 2025-07-09 08:15:00   0.32   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.027910Z","level":"info","event":"299  42600        100 2025-07-09 08:30:00   0.29   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.028044Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.028180Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.038328Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.039319","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:53:37.061772Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.061989Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:53:37.062110Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
