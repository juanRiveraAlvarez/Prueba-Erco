{"timestamp":"2025-07-14T02:08:38.275360","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:08:38.277273","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:08:38.342635Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.342896Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.343042Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.343174Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.317758","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:08:38.428448Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.428752Z","level":"info","event":"0    43901          1 2025-07-09 12:00:00   1.47   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.428961Z","level":"info","event":"1    44001          1 2025-07-09 12:15:00   0.58   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.429136Z","level":"info","event":"2    44101          1 2025-07-09 12:30:00   1.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.429317Z","level":"info","event":"3    43902          2 2025-07-09 12:00:00   1.01   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.429495Z","level":"info","event":"4    44002          2 2025-07-09 12:15:00   0.76   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.429669Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.429849Z","level":"info","event":"295  43999         99 2025-07-09 12:00:00   1.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.430023Z","level":"info","event":"296  44099         99 2025-07-09 12:15:00   0.70   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.430197Z","level":"info","event":"297  43900        100 2025-07-09 11:45:00   0.58   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.430367Z","level":"info","event":"298  44000        100 2025-07-09 12:00:00   1.23   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.430540Z","level":"info","event":"299  44100        100 2025-07-09 12:15:00   1.31   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.430709Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.430875Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.448952Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.450621","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:08:38.484297Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.484596Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:08:38.484786Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
