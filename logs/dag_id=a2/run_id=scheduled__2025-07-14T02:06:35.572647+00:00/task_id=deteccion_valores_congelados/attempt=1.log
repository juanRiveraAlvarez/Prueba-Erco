{"timestamp":"2025-07-14T02:06:36.993916","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:06:36.996069","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:06:37.076277Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.076545Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.076701Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.076851Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.040806","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:06:37.133550Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.133793Z","level":"info","event":"0    43601          1 2025-07-09 11:15:00   1.05   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.133938Z","level":"info","event":"1    43701          1 2025-07-09 11:30:00   1.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.134078Z","level":"info","event":"2    43801          1 2025-07-09 11:45:00   0.91   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.134212Z","level":"info","event":"3    43602          2 2025-07-09 11:15:00   1.45   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.134340Z","level":"info","event":"4    43702          2 2025-07-09 11:30:00   1.15   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.134467Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.134594Z","level":"info","event":"295  43799         99 2025-07-09 11:30:00   1.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.134729Z","level":"info","event":"296  43899         99 2025-07-09 11:45:00   1.07   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.134882Z","level":"info","event":"297  43700        100 2025-07-09 11:15:00   0.87   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.135037Z","level":"info","event":"298  43800        100 2025-07-09 11:30:00   1.07   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.135192Z","level":"info","event":"299  43900        100 2025-07-09 11:45:00   0.58   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.135362Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.135618Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.148439Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.149452","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:06:37.182297Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.182552Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:06:37.182719Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
