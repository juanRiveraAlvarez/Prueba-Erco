{"timestamp":"2025-07-14T01:29:36.075155","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:29:36.075803","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:29:36.128283Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.128582Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.128753Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.128905Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.100036","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:29:36.184589Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.184837Z","level":"info","event":"0    39901          1 2025-07-08 14:45:00   1.08   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.184978Z","level":"info","event":"1    40001          1 2025-07-08 15:00:00   0.36   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.185107Z","level":"info","event":"2    40101          1 2025-07-08 15:15:00   1.06   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.185238Z","level":"info","event":"3    39902          2 2025-07-08 14:45:00   0.80   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.185362Z","level":"info","event":"4    40002          2 2025-07-08 15:00:00   0.87   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.185489Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.185614Z","level":"info","event":"295  40099         99 2025-07-08 15:00:00   0.94   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.185754Z","level":"info","event":"296  40199         99 2025-07-08 15:15:00   1.04   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.185899Z","level":"info","event":"297  40000        100 2025-07-08 14:45:00   0.69   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.186037Z","level":"info","event":"298  40100        100 2025-07-08 15:00:00   0.90   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.186177Z","level":"info","event":"299  40200        100 2025-07-08 15:15:00   0.86   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.186318Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.186452Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.196559Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.197446","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:29:36.222525Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.222740Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:29:36.222865Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
