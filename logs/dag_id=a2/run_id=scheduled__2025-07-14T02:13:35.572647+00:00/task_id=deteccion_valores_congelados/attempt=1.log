{"timestamp":"2025-07-14T02:13:37.291106","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:13:37.292188","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:13:37.346364Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.346634Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.346806Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.346966Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.322754","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:13:37.427250Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.427496Z","level":"info","event":"0    44301          1 2025-07-09 13:00:00   0.84   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.427633Z","level":"info","event":"1    44401          1 2025-07-09 13:15:00   0.81   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.427752Z","level":"info","event":"2    44501          1 2025-07-09 13:30:00   0.99   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.427871Z","level":"info","event":"3    44302          2 2025-07-09 13:00:00   0.61   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.427985Z","level":"info","event":"4    44402          2 2025-07-09 13:15:00   9.68   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.428096Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.428208Z","level":"info","event":"295  44499         99 2025-07-09 13:15:00   1.15   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.428320Z","level":"info","event":"296  44599         99 2025-07-09 13:30:00   1.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.428431Z","level":"info","event":"297  44400        100 2025-07-09 13:00:00   1.01   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.428542Z","level":"info","event":"298  44500        100 2025-07-09 13:15:00   0.92   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.428652Z","level":"info","event":"299  44600        100 2025-07-09 13:30:00   1.27   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.428765Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.428875Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.443847Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.444822","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:13:37.490229Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.490456Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:13:37.490598Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
