{"timestamp":"2025-07-13T00:16:38.667944","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:16:38.668896","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:16:38.729953Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.730394Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.730669Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.730877Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.705859","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:16:38.817516Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.817775Z","level":"info","event":"0    231784          1 2025-07-08 09:15:00   0.41   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.817915Z","level":"info","event":"1    231884          1 2025-07-08 09:30:00   1.05   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.818037Z","level":"info","event":"2    231984          1 2025-07-08 09:45:00   0.76   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.818174Z","level":"info","event":"3    231785          2 2025-07-08 09:15:00   0.44   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.818308Z","level":"info","event":"4    231885          2 2025-07-08 09:30:00   0.99   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.818494Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.818712Z","level":"info","event":"295  231982         99 2025-07-08 09:30:00   0.96   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.818858Z","level":"info","event":"296  232082         99 2025-07-08 09:45:00   0.57   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.818993Z","level":"info","event":"297  231883        100 2025-07-08 09:15:00   0.42   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.819146Z","level":"info","event":"298  231983        100 2025-07-08 09:30:00   0.68   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.819285Z","level":"info","event":"299  232083        100 2025-07-08 09:45:00   0.49   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.819419Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.819553Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.837371Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.838540","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:16:38.877047Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.877415Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:16:38.877608Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
