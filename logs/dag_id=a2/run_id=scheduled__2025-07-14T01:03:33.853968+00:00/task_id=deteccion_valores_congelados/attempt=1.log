{"timestamp":"2025-07-14T01:03:36.324862","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:03:36.325655","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:03:36.377903Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.378157Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.378315Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.378442Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.354771","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:03:36.429786Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.430052Z","level":"info","event":"0    37301          1 2025-07-08 08:15:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.430218Z","level":"info","event":"1    37401          1 2025-07-08 08:30:00   0.63   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.430369Z","level":"info","event":"2    37501          1 2025-07-08 08:45:00   0.42   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.430519Z","level":"info","event":"3    37302          2 2025-07-08 08:15:00   0.67   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.430666Z","level":"info","event":"4    37402          2 2025-07-08 08:30:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.430812Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.430957Z","level":"info","event":"295  37499         99 2025-07-08 08:30:00   0.58   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.431104Z","level":"info","event":"296  37599         99 2025-07-08 08:45:00   0.40   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.431247Z","level":"info","event":"297  37400        100 2025-07-08 08:15:00   0.51   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.431418Z","level":"info","event":"298  37500        100 2025-07-08 08:30:00   0.26   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.431562Z","level":"info","event":"299  37600        100 2025-07-08 08:45:00   0.40   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.431708Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.431852Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.442626Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.443518","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:03:36.471663Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.471929Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:03:36.472105Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
