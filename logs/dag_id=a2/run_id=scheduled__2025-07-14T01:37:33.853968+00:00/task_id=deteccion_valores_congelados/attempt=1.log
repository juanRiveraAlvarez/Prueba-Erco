{"timestamp":"2025-07-14T01:37:36.478740","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:37:36.479412","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:37:36.534329Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.534560Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.534696Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.534822Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.508564","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:37:36.594265Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.594450Z","level":"info","event":"0    40701          1 2025-07-08 16:45:00   0.30   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.594552Z","level":"info","event":"1    40801          1 2025-07-08 17:00:00   0.17   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.594646Z","level":"info","event":"2    40901          1 2025-07-08 17:15:00   0.30   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.594738Z","level":"info","event":"3    40702          2 2025-07-08 16:45:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.594827Z","level":"info","event":"4    40802          2 2025-07-08 17:00:00   2.87   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.594916Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.595002Z","level":"info","event":"295  40899         99 2025-07-08 17:00:00   0.20   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.595089Z","level":"info","event":"296  40999         99 2025-07-08 17:15:00   0.27   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.595175Z","level":"info","event":"297  40800        100 2025-07-08 16:45:00   0.51   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.595260Z","level":"info","event":"298  40900        100 2025-07-08 17:00:00   0.27   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.595372Z","level":"info","event":"299  41000        100 2025-07-08 17:15:00   0.29   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.595459Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.595544Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.605403Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.606215","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:37:36.627201Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.627415Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:37:36.627525Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
