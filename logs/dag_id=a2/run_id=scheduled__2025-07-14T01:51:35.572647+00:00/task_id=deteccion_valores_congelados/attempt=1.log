{"timestamp":"2025-07-14T01:51:38.295823","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:51:38.296633","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:51:38.372567Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.372801Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.372933Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.373057Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.326391","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:51:38.413404Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.413700Z","level":"info","event":"0    42201          1 2025-07-09 07:45:00   2.32   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.413880Z","level":"info","event":"1    42301          1 2025-07-09 08:00:00   0.72   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.414064Z","level":"info","event":"2    42401          1 2025-07-09 08:15:00   0.25   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.414241Z","level":"info","event":"3    42202          2 2025-07-09 07:45:00   0.24   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.414410Z","level":"info","event":"4    42302          2 2025-07-09 08:00:00   0.70   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.414582Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.414761Z","level":"info","event":"295  42299         99 2025-07-09 07:45:00   0.27   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.414932Z","level":"info","event":"296  42399         99 2025-07-09 08:00:00   0.38   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.415100Z","level":"info","event":"297  42200        100 2025-07-09 07:30:00   0.14   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.415312Z","level":"info","event":"298  42300        100 2025-07-09 07:45:00   0.23   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.415497Z","level":"info","event":"299  42400        100 2025-07-09 08:00:00   0.43   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.415669Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.415842Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.429773Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.430714","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:51:38.464700Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.464988Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:51:38.465164Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
