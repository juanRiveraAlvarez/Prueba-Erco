{"timestamp":"2025-07-13T00:15:38.819639","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:15:38.820529","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:15:38.865715Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.865958Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.866100Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.866235Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.853624","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:15:38.938501Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.938747Z","level":"info","event":"0    231684          1 2025-07-08 09:00:00   0.42   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.938888Z","level":"info","event":"1    231784          1 2025-07-08 09:15:00   0.41   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939015Z","level":"info","event":"2    231884          1 2025-07-08 09:30:00   1.05   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939141Z","level":"info","event":"3    231685          2 2025-07-08 09:00:00   0.73   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939261Z","level":"info","event":"4    231785          2 2025-07-08 09:15:00   0.44   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939379Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939495Z","level":"info","event":"295  231882         99 2025-07-08 09:15:00   0.99   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939612Z","level":"info","event":"296  231982         99 2025-07-08 09:30:00   0.96   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939728Z","level":"info","event":"297  231783        100 2025-07-08 09:00:00   0.49   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939846Z","level":"info","event":"298  231883        100 2025-07-08 09:15:00   0.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.939962Z","level":"info","event":"299  231983        100 2025-07-08 09:30:00   0.68   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.940077Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.940192Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.950225Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.951026","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:15:38.980341Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.980672Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:15:38.980898Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
