{"timestamp":"2025-07-13T00:12:39.629806","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:12:39.630838","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:12:39.688357Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.688673Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.688886Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.689090Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.665944","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:12:39.748576Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.748909Z","level":"info","event":"0    231384          1 2025-07-08 08:15:00   0.60   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.749092Z","level":"info","event":"1    231484          1 2025-07-08 08:30:00   0.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.749278Z","level":"info","event":"2    231584          1 2025-07-08 08:45:00   0.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.749424Z","level":"info","event":"3    231385          2 2025-07-08 08:15:00   0.29   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.749544Z","level":"info","event":"4    231485          2 2025-07-08 08:30:00   0.66   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.749670Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.749922Z","level":"info","event":"295  231582         99 2025-07-08 08:30:00   0.43   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.750080Z","level":"info","event":"296  231682         99 2025-07-08 08:45:00   0.39   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.750201Z","level":"info","event":"297  231483        100 2025-07-08 08:15:00   0.30   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.750317Z","level":"info","event":"298  231583        100 2025-07-08 08:30:00   0.62   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.750433Z","level":"info","event":"299  231683        100 2025-07-08 08:45:00   0.68   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.750548Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.750662Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.762741Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.763635","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:12:39.793685Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.793971Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:12:39.794139Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
