{"timestamp":"2025-07-13T00:22:38.525952","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:22:38.526549","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:22:38.575334Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.575687Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.575905Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.576105Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.551436","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:22:38.609978Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.610187Z","level":"info","event":"0    232184          1 2025-07-08 10:15:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.610304Z","level":"info","event":"1    232284          1 2025-07-08 10:30:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.610420Z","level":"info","event":"2    232384          1 2025-07-08 10:45:00   1.22   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.610566Z","level":"info","event":"3    232185          2 2025-07-08 10:15:00   1.04   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.610705Z","level":"info","event":"4    232285          2 2025-07-08 10:30:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.610827Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.610947Z","level":"info","event":"295  232382         99 2025-07-08 10:30:00   0.85   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.611068Z","level":"info","event":"296  232482         99 2025-07-08 10:45:00   0.60   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.611187Z","level":"info","event":"297  232283        100 2025-07-08 10:15:00   0.87   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.611308Z","level":"info","event":"298  232383        100 2025-07-08 10:30:00   1.29   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.611429Z","level":"info","event":"299  232483        100 2025-07-08 10:45:00   0.76   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.611548Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.611670Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.619383Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.620073","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:22:38.655105Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.655299Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:22:38.655390Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
