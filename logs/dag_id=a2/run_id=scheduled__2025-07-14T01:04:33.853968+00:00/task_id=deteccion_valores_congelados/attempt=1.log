{"timestamp":"2025-07-14T01:04:35.944654","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:04:35.945651","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:04:36.015858Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.016113Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.016265Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.016412Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:35.983535","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:04:36.079890Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.080212Z","level":"info","event":"0    37401          1 2025-07-08 08:30:00   0.63   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.080412Z","level":"info","event":"1    37501          1 2025-07-08 08:45:00   0.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.080594Z","level":"info","event":"2    37601          1 2025-07-08 09:00:00   0.38   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.080802Z","level":"info","event":"3    37402          2 2025-07-08 08:30:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.081020Z","level":"info","event":"4    37502          2 2025-07-08 08:45:00   0.31   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.081273Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.081460Z","level":"info","event":"295  37599         99 2025-07-08 08:45:00   0.40   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.081642Z","level":"info","event":"296  37699         99 2025-07-08 09:00:00   0.77   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.081825Z","level":"info","event":"297  37500        100 2025-07-08 08:30:00   0.26   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.082006Z","level":"info","event":"298  37600        100 2025-07-08 08:45:00   0.40   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.082191Z","level":"info","event":"299  37700        100 2025-07-08 09:00:00   0.78   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.082382Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.082577Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.098067Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.099061","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:04:36.132519Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.132776Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:04:36.132937Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
