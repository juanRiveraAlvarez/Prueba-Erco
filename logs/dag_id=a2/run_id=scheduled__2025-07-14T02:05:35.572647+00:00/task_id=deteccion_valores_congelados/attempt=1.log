{"timestamp":"2025-07-14T02:05:36.701541","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:05:36.702529","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:05:36.748320Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.748548Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.748662Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.748796Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.737290","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:05:36.810103Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.810314Z","level":"info","event":"0    43501          1 2025-07-09 11:00:00   1.06   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.810484Z","level":"info","event":"1    43601          1 2025-07-09 11:15:00   1.05   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.810626Z","level":"info","event":"2    43701          1 2025-07-09 11:30:00   1.42   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.810780Z","level":"info","event":"3    43502          2 2025-07-09 11:00:00   1.20   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.810921Z","level":"info","event":"4    43602          2 2025-07-09 11:15:00   1.45   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.811073Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.811256Z","level":"info","event":"295  43699         99 2025-07-09 11:15:00   0.89   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.811440Z","level":"info","event":"296  43799         99 2025-07-09 11:30:00   1.38   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.811570Z","level":"info","event":"297  43600        100 2025-07-09 11:00:00   0.71   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.811675Z","level":"info","event":"298  43700        100 2025-07-09 11:15:00   0.87   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.811789Z","level":"info","event":"299  43800        100 2025-07-09 11:30:00   1.07   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.811910Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.812032Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.820163Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.820846","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:05:36.842388Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.842592Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:05:36.842702Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
