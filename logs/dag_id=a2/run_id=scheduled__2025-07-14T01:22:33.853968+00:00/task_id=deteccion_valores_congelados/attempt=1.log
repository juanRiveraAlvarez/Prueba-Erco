{"timestamp":"2025-07-14T01:22:36.015373","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:22:36.016325","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:22:36.077231Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.077494Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.077643Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.077787Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.049223","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:22:36.161005Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.161380Z","level":"info","event":"0    39201          1 2025-07-08 13:00:00   1.42   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.161541Z","level":"info","event":"1    39301          1 2025-07-08 13:15:00   1.43   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.161701Z","level":"info","event":"2    39401          1 2025-07-08 13:30:00   0.75   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.161861Z","level":"info","event":"3    39202          2 2025-07-08 13:00:00   1.09   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.161984Z","level":"info","event":"4    39302          2 2025-07-08 13:15:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.162100Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.162213Z","level":"info","event":"295  39399         99 2025-07-08 13:15:00   0.79   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.162324Z","level":"info","event":"296  39499         99 2025-07-08 13:30:00   0.62   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.162435Z","level":"info","event":"297  39300        100 2025-07-08 13:00:00   1.33   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.162546Z","level":"info","event":"298  39400        100 2025-07-08 13:15:00   1.09   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.162657Z","level":"info","event":"299  39500        100 2025-07-08 13:30:00   6.24   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.162771Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.162927Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.172714Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.173708","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:22:36.205129Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.206910Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:22:36.207187Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
