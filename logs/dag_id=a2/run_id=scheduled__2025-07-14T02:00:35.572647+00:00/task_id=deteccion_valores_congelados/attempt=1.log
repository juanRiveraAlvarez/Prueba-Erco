{"timestamp":"2025-07-14T02:00:37.561524","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:00:37.565492","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:00:37.617403Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.617631Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.617747Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.617852Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.594909","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:00:37.669638Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.669885Z","level":"info","event":"0    43001          1 2025-07-09 09:45:00   0.78   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.670033Z","level":"info","event":"1    43101          1 2025-07-09 10:00:00   1.11   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.670177Z","level":"info","event":"2    43201          1 2025-07-09 10:15:00   1.27   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.670327Z","level":"info","event":"3    43002          2 2025-07-09 09:45:00   0.78   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.670468Z","level":"info","event":"4    43102          2 2025-07-09 10:00:00   0.77   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.670609Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.670756Z","level":"info","event":"295  43199         99 2025-07-09 10:00:00   1.09   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.670899Z","level":"info","event":"296  43299         99 2025-07-09 10:15:00   0.80   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.671038Z","level":"info","event":"297  43100        100 2025-07-09 09:45:00   0.52   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.671176Z","level":"info","event":"298  43200        100 2025-07-09 10:00:00   0.67   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.671347Z","level":"info","event":"299  43300        100 2025-07-09 10:15:00   0.75   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.671489Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.671628Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.681836Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.682718","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:00:37.705797Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.706035Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:00:37.706187Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
