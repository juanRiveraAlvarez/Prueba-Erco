{"timestamp":"2025-07-14T01:49:36.755001","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:49:36.755891","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:49:36.814962Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.815254Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.815464Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.815636Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.785186","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:49:36.874550Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.874836Z","level":"info","event":"0    41901          1 2025-07-09 07:00:00   0.13   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.875022Z","level":"info","event":"1    42001          1 2025-07-09 07:15:00   0.30   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.875190Z","level":"info","event":"2    42101          1 2025-07-09 07:30:00   0.19   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.875392Z","level":"info","event":"3    41902          2 2025-07-09 07:00:00   0.18   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.875538Z","level":"info","event":"4    42002          2 2025-07-09 07:15:00   0.27   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.875695Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.875841Z","level":"info","event":"295  42099         99 2025-07-09 07:15:00   0.23   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.875984Z","level":"info","event":"296  42199         99 2025-07-09 07:30:00   0.34   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.876132Z","level":"info","event":"297  42000        100 2025-07-09 07:00:00   0.17   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.876532Z","level":"info","event":"298  42100        100 2025-07-09 07:15:00   0.19   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.876702Z","level":"info","event":"299  42200        100 2025-07-09 07:30:00   0.14   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.876852Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.877010Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.887826Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.888880","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:49:36.922856Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.923134Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:49:36.923334Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
