{"timestamp":"2025-07-14T02:29:37.235042","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:29:37.236216","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:29:37.291772Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.292043Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.292212Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.292376Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.273990","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:29:37.397646Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.397963Z","level":"info","event":"0    45901          1 2025-07-09 17:00:00   0.31   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.398179Z","level":"info","event":"1    46001          1 2025-07-09 17:15:00   0.16   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.398383Z","level":"info","event":"2    46101          1 2025-07-09 17:30:00   0.16   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.398582Z","level":"info","event":"3    45902          2 2025-07-09 17:00:00   0.14   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.398776Z","level":"info","event":"4    46002          2 2025-07-09 17:15:00   0.17   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.398965Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.399154Z","level":"info","event":"295  46099         99 2025-07-09 17:15:00   0.30   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.399378Z","level":"info","event":"296  46199         99 2025-07-09 17:30:00   0.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.399567Z","level":"info","event":"297  46000        100 2025-07-09 17:00:00   0.25   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.399752Z","level":"info","event":"298  46100        100 2025-07-09 17:15:00   0.23   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.399934Z","level":"info","event":"299  46200        100 2025-07-09 17:30:00   0.00   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.400122Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.400304Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.411860Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.412750","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:29:37.450704Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.450979Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:29:37.451178Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
