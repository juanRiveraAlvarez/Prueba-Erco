{"timestamp":"2025-07-14T01:56:36.553627","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:56:36.554420","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:56:36.602595Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.602817Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.602967Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.603109Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.583217","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:56:36.684456Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.684650Z","level":"info","event":"0    42601          1 2025-07-09 08:45:00   0.47   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.684754Z","level":"info","event":"1    42701          1 2025-07-09 09:00:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.684847Z","level":"info","event":"2    42801          1 2025-07-09 09:15:00   0.52   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.684939Z","level":"info","event":"3    42602          2 2025-07-09 08:45:00   0.36   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685027Z","level":"info","event":"4    42702          2 2025-07-09 09:00:00   0.59   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685115Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685200Z","level":"info","event":"295  42799         99 2025-07-09 09:00:00   0.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685285Z","level":"info","event":"296  42899         99 2025-07-09 09:15:00   0.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685369Z","level":"info","event":"297  42700        100 2025-07-09 08:45:00   0.50   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685454Z","level":"info","event":"298  42800        100 2025-07-09 09:00:00   0.64   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685539Z","level":"info","event":"299  42900        100 2025-07-09 09:15:00   4.06   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685624Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.685709Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.698962Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.699805","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:56:36.729969Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.730197Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:56:36.730322Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
