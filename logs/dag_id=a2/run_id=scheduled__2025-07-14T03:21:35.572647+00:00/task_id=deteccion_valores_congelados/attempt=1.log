{"timestamp":"2025-07-14T03:21:37.573491","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T03:21:37.573969","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T03:21:37.617601Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.617807Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.617915Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.618016Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.596978","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T03:21:37.655981Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656179Z","level":"info","event":"0    47001          1 2025-07-10 07:00:00   0.37   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656289Z","level":"info","event":"1    47101          1 2025-07-10 07:15:00   0.17   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656392Z","level":"info","event":"2    47201          1 2025-07-10 07:30:00   0.20   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656497Z","level":"info","event":"3    47002          2 2025-07-10 07:00:00   0.20   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656592Z","level":"info","event":"4    47102          2 2025-07-10 07:15:00   0.17   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656694Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656798Z","level":"info","event":"295  47199         99 2025-07-10 07:15:00   0.15   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656902Z","level":"info","event":"296  47299         99 2025-07-10 07:30:00   0.16   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.656999Z","level":"info","event":"297  47100        100 2025-07-10 07:00:00   0.22   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.657095Z","level":"info","event":"298  47200        100 2025-07-10 07:15:00   0.28   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.657195Z","level":"info","event":"299  47300        100 2025-07-10 07:30:00   0.28   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.657293Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.657389Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.664303Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.664996","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T03:21:37.688977Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.689345Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T03:21:37.689542Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
