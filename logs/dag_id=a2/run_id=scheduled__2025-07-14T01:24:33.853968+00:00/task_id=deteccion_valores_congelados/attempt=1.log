{"timestamp":"2025-07-14T01:24:36.070665","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:24:36.071582","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:24:36.116042Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.116270Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.116378Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.116481Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.097702","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:24:36.165211Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.165428Z","level":"info","event":"0    39401          1 2025-07-08 13:30:00   0.75   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.165565Z","level":"info","event":"1    39501          1 2025-07-08 13:45:00   1.36   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.165682Z","level":"info","event":"2    39601          1 2025-07-08 14:00:00   0.59   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.165801Z","level":"info","event":"3    39402          2 2025-07-08 13:30:00   0.76   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.165918Z","level":"info","event":"4    39502          2 2025-07-08 13:45:00   0.81   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.166030Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.166149Z","level":"info","event":"295  39599         99 2025-07-08 13:45:00   1.30   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.166265Z","level":"info","event":"296  39699         99 2025-07-08 14:00:00   0.67   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.166377Z","level":"info","event":"297  39500        100 2025-07-08 13:30:00   6.24   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.166489Z","level":"info","event":"298  39600        100 2025-07-08 13:45:00   1.24   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.166600Z","level":"info","event":"299  39700        100 2025-07-08 14:00:00   0.58   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.166715Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.166827Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.174901Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.175706","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:24:36.198492Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.198680Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:24:36.198802Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
