{"timestamp":"2025-07-14T02:14:36.911299","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:14:36.912302","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:14:36.967710Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:36.967988Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:36.968163Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:36.968333Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:36.947469","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:14:37.045282Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.045515Z","level":"info","event":"0    44401          1 2025-07-09 13:15:00   0.81   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.045660Z","level":"info","event":"1    44501          1 2025-07-09 13:30:00   0.99   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.045793Z","level":"info","event":"2    44601          1 2025-07-09 13:45:00   1.15   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.045914Z","level":"info","event":"3    44402          2 2025-07-09 13:15:00   9.68   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.046030Z","level":"info","event":"4    44502          2 2025-07-09 13:30:00   0.55   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.046156Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.046275Z","level":"info","event":"295  44599         99 2025-07-09 13:30:00   1.36   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.046392Z","level":"info","event":"296  44699         99 2025-07-09 13:45:00   1.00   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.046509Z","level":"info","event":"297  44500        100 2025-07-09 13:15:00   0.92   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.046638Z","level":"info","event":"298  44600        100 2025-07-09 13:30:00   1.27   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.046784Z","level":"info","event":"299  44700        100 2025-07-09 13:45:00   0.94   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.046928Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.047176Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.060363Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.061357","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:14:37.092215Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.092504Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:14:37.092700Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
