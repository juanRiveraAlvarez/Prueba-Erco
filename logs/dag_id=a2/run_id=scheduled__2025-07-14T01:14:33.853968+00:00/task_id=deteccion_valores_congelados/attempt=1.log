{"timestamp":"2025-07-14T01:14:35.841169","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:14:35.842275","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:14:35.901835Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.902166Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.902375Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.902563Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.879781","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:14:35.977422Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.977743Z","level":"info","event":"0    38401          1 2025-07-08 11:00:00   0.57   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.977969Z","level":"info","event":"1    38501          1 2025-07-08 11:15:00   0.63   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.978179Z","level":"info","event":"2    38601          1 2025-07-08 11:30:00   1.00   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.978385Z","level":"info","event":"3    38402          2 2025-07-08 11:00:00   0.69   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.978579Z","level":"info","event":"4    38502          2 2025-07-08 11:15:00   1.29   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.978793Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.978995Z","level":"info","event":"295  38599         99 2025-07-08 11:15:00   1.44   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.979176Z","level":"info","event":"296  38699         99 2025-07-08 11:30:00   1.37   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.979409Z","level":"info","event":"297  38500        100 2025-07-08 11:00:00   1.01   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.979603Z","level":"info","event":"298  38600        100 2025-07-08 11:15:00   0.96   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.979793Z","level":"info","event":"299  38700        100 2025-07-08 11:30:00   0.68   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.979982Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.980168Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.996175Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:35.997347","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:14:36.028231Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:36.028453Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:14:36.028569Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
