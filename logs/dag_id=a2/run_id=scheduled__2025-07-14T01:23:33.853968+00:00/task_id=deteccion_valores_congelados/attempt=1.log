{"timestamp":"2025-07-14T01:23:35.982847","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:23:35.983695","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:23:36.032406Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.032636Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.032760Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.032874Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.010475","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:23:36.089190Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.089474Z","level":"info","event":"0    39301          1 2025-07-08 13:15:00   1.43   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.089993Z","level":"info","event":"1    39401          1 2025-07-08 13:30:00   0.75   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.090511Z","level":"info","event":"2    39501          1 2025-07-08 13:45:00   1.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.090752Z","level":"info","event":"3    39302          2 2025-07-08 13:15:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.090948Z","level":"info","event":"4    39402          2 2025-07-08 13:30:00   0.76   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.091460Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.091697Z","level":"info","event":"295  39499         99 2025-07-08 13:30:00   0.62   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.091878Z","level":"info","event":"296  39599         99 2025-07-08 13:45:00   1.30   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.092066Z","level":"info","event":"297  39400        100 2025-07-08 13:15:00   1.09   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.092240Z","level":"info","event":"298  39500        100 2025-07-08 13:30:00   6.24   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.092404Z","level":"info","event":"299  39600        100 2025-07-08 13:45:00   1.24   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.092569Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.092726Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.103158Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.104484","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:23:36.135135Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.135420Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:23:36.135582Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
