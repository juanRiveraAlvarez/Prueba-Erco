{"timestamp":"2025-07-14T02:01:36.976494","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:01:36.978559","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:01:37.036948Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.037247Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.037435Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.037619Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.023410","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:01:37.136273Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.136691Z","level":"info","event":"0    43101          1 2025-07-09 10:00:00   1.11   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.137044Z","level":"info","event":"1    43201          1 2025-07-09 10:15:00   1.27   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.137342Z","level":"info","event":"2    43301          1 2025-07-09 10:30:00   0.70   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.137600Z","level":"info","event":"3    43102          2 2025-07-09 10:00:00   0.77   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.137837Z","level":"info","event":"4    43202          2 2025-07-09 10:15:00   0.80   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.138066Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.138316Z","level":"info","event":"295  43299         99 2025-07-09 10:15:00   0.80   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.138551Z","level":"info","event":"296  43399         99 2025-07-09 10:30:00   0.49   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.138800Z","level":"info","event":"297  43200        100 2025-07-09 10:00:00   0.67   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.139024Z","level":"info","event":"298  43300        100 2025-07-09 10:15:00   0.75   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.139296Z","level":"info","event":"299  43400        100 2025-07-09 10:30:00   1.10   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.139516Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.139758Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.166774Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.168482","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:01:37.203037Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.203388Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:01:37.203562Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
