{"timestamp":"2025-07-14T02:38:36.800466","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:38:36.801648","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:38:36.870457Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.870763Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.870947Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.871117Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.846135","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:38:36.960632Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.960952Z","level":"info","event":"0    46101          1 2025-07-09 17:30:00   0.16   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.961168Z","level":"info","event":"1    46201          1 2025-07-09 17:45:00   0.13   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.961361Z","level":"info","event":"2    47001          1 2025-07-10 07:00:00   0.37   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.961546Z","level":"info","event":"3    46102          2 2025-07-09 17:30:00   0.30   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.961726Z","level":"info","event":"4    46202          2 2025-07-09 17:45:00   0.35   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.961910Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.962086Z","level":"info","event":"295  46299         99 2025-07-09 17:45:00   0.15   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.962260Z","level":"info","event":"296  47099         99 2025-07-10 07:00:00   0.13   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.962440Z","level":"info","event":"297  46200        100 2025-07-09 17:30:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.962612Z","level":"info","event":"298  46300        100 2025-07-09 17:45:00   0.32   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.962782Z","level":"info","event":"299  47100        100 2025-07-10 07:00:00   0.22   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.962967Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.963137Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.985407Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:36.986382","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:38:37.023796Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:37.024099Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:38:37.024285Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
