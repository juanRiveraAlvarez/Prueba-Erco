{"timestamp":"2025-07-14T02:10:36.877648","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:10:36.878730","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:10:36.954170Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:36.954463Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:36.954655Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:36.954836Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:36.911468","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:10:37.012302Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.012602Z","level":"info","event":"0    44001          1 2025-07-09 12:15:00   0.58   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.012804Z","level":"info","event":"1    44101          1 2025-07-09 12:30:00   1.36   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.012985Z","level":"info","event":"2    44201          1 2025-07-09 12:45:00   1.17   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.013167Z","level":"info","event":"3    44002          2 2025-07-09 12:15:00   0.76   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.013351Z","level":"info","event":"4    44102          2 2025-07-09 12:30:00   1.26   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.013532Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.013708Z","level":"info","event":"295  44199         99 2025-07-09 12:30:00   1.10   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.013887Z","level":"info","event":"296  44299         99 2025-07-09 12:45:00   1.28   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.014066Z","level":"info","event":"297  44100        100 2025-07-09 12:15:00   1.31   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.014262Z","level":"info","event":"298  44200        100 2025-07-09 12:30:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.014451Z","level":"info","event":"299  44300        100 2025-07-09 12:45:00   0.92   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.014647Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.014824Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.025203Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.025998","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:10:37.054506Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.054765Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:10:37.054940Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
