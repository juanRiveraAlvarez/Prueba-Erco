{"timestamp":"2025-07-14T01:27:35.536503","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:27:35.537073","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:27:35.579755Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.580007Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.580150Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.580254Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.561501","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:27:35.641270Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.641502Z","level":"info","event":"0    39701          1 2025-07-08 14:15:00   0.89   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.641640Z","level":"info","event":"1    39801          1 2025-07-08 14:30:00   0.66   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.641765Z","level":"info","event":"2    39901          1 2025-07-08 14:45:00   1.08   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.641895Z","level":"info","event":"3    39702          2 2025-07-08 14:15:00   0.45   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642018Z","level":"info","event":"4    39802          2 2025-07-08 14:30:00   0.49   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642138Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642261Z","level":"info","event":"295  39899         99 2025-07-08 14:30:00   0.68   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642380Z","level":"info","event":"296  39999         99 2025-07-08 14:45:00   1.02   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642497Z","level":"info","event":"297  39800        100 2025-07-08 14:15:00   1.17   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642616Z","level":"info","event":"298  39900        100 2025-07-08 14:30:00   1.12   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642740Z","level":"info","event":"299  40000        100 2025-07-08 14:45:00   0.69   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642860Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.642983Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.657329Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.658262","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:27:35.686862Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.687092Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:27:35.687224Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
