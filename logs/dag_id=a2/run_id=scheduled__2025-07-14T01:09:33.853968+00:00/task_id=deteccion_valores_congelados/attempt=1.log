{"timestamp":"2025-07-14T01:09:36.470186","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:09:36.471120","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:09:36.526089Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.526366Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.526539Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.526696Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.509022","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:09:36.620231Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.620462Z","level":"info","event":"0    37901          1 2025-07-08 09:45:00   0.85   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.620590Z","level":"info","event":"1    38001          1 2025-07-08 10:00:00   0.73   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.620705Z","level":"info","event":"2    38101          1 2025-07-08 10:15:00   0.68   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.620816Z","level":"info","event":"3    37902          2 2025-07-08 09:45:00   0.98   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.620942Z","level":"info","event":"4    38002          2 2025-07-08 10:00:00   0.77   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.621093Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.621239Z","level":"info","event":"295  38099         99 2025-07-08 10:00:00   0.98   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.621412Z","level":"info","event":"296  38199         99 2025-07-08 10:15:00   1.01   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.621564Z","level":"info","event":"297  38000        100 2025-07-08 09:45:00   0.44   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.621697Z","level":"info","event":"298  38100        100 2025-07-08 10:00:00   0.94   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.621810Z","level":"info","event":"299  38200        100 2025-07-08 10:15:00   0.94   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.621921Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.622033Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.641484Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.641776Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.640862","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:09:36.671458Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:09:36.671758Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
