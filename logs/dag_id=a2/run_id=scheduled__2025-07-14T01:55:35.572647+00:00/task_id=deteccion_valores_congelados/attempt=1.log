{"timestamp":"2025-07-14T01:55:36.604936","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:55:36.605749","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:55:36.651683Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.651933Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.652082Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.652225Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.633109","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:55:36.719398Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.719591Z","level":"info","event":"0    42501          1 2025-07-09 08:30:00   0.61   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.719689Z","level":"info","event":"1    42601          1 2025-07-09 08:45:00   0.47   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.719779Z","level":"info","event":"2    42701          1 2025-07-09 09:00:00   0.00   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.719869Z","level":"info","event":"3    42502          2 2025-07-09 08:30:00   0.26   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.719956Z","level":"info","event":"4    42602          2 2025-07-09 08:45:00   0.36   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.720042Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.720126Z","level":"info","event":"295  42699         99 2025-07-09 08:45:00   0.59   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.720211Z","level":"info","event":"296  42799         99 2025-07-09 09:00:00   0.38   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.720295Z","level":"info","event":"297  42600        100 2025-07-09 08:30:00   0.29   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.720379Z","level":"info","event":"298  42700        100 2025-07-09 08:45:00   0.50   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.720464Z","level":"info","event":"299  42800        100 2025-07-09 09:00:00   0.64   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.720548Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.720632Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.731157Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.732343","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:55:36.765119Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.765372Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:55:36.765504Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
