{"timestamp":"2025-07-13T15:11:52.466153","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T15:11:52.470762","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T15:11:52.542833Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.543197Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.543536Z","level":"info","event":"Current task name:detectar_pico","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.543752Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.525390","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:96: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  ultimos_df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T15:11:52.553485","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:103: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  historico_df = pd.read_sql(\"SELECT * FROM franja_valores_historicos\", conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T15:11:52.715079Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.722605Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.729673Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.740083Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.747438Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.760127Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.762064Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.768610Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.775990Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.787431Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.792729Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.800264Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.806470Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.813019Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.820241Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.830038Z","level":"info","event":"atipico","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.840545Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.847046Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.853597Z","level":"info","event":"atipico","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.860595Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.866884Z","level":"info","event":"atipico","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.873805Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.881425Z","level":"info","event":"breve","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.888799Z","level":"info","event":"atipico","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.891552","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T15:11:52.933806Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.934235Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T15:11:52.934506Z","level":"info","event":"Task operator:<Task(PythonOperator): detectar_pico>","chan":"stdout","logger":"task"}
