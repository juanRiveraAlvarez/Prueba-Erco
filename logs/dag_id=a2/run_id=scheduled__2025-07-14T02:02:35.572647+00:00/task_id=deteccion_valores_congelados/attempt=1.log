{"timestamp":"2025-07-14T02:02:36.654889","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:02:36.656286","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:02:36.731610Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.731926Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.732152Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.732331Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.699701","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:02:36.817763Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.818082Z","level":"info","event":"0    43201          1 2025-07-09 10:15:00   1.27   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.818307Z","level":"info","event":"1    43301          1 2025-07-09 10:30:00   0.70   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.818474Z","level":"info","event":"2    43401          1 2025-07-09 10:45:00   0.00   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.818653Z","level":"info","event":"3    43202          2 2025-07-09 10:15:00   0.80   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.818834Z","level":"info","event":"4    43302          2 2025-07-09 10:30:00   1.27   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.818997Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.819154Z","level":"info","event":"295  43399         99 2025-07-09 10:30:00   0.49   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.819358Z","level":"info","event":"296  43499         99 2025-07-09 10:45:00   1.22   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.819560Z","level":"info","event":"297  43300        100 2025-07-09 10:15:00   0.75   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.819908Z","level":"info","event":"298  43400        100 2025-07-09 10:30:00   1.10   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.820108Z","level":"info","event":"299  43500        100 2025-07-09 10:45:00   0.59   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.820276Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.820413Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.846022Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.846328Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.846544Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.846741Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:02:36.844094","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
