{"timestamp":"2025-07-14T00:56:36.125440","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T00:56:36.130697","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T00:56:36.232942Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.233288Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.233511Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.233714Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.188660","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T00:56:36.357613Z","level":"info","event":"        id  device_id           timestamp   value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.357992Z","level":"info","event":"0      359          1 2025-07-07 17:30:00  216.95   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.358253Z","level":"info","event":"1      360          1 2025-07-07 17:45:00  217.30   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.358483Z","level":"info","event":"2    36801          1 2025-07-08 07:00:00    0.21   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.358710Z","level":"info","event":"3      723          2 2025-07-07 17:30:00  235.29   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.358934Z","level":"info","event":"4      724          2 2025-07-07 17:45:00  235.64   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.359158Z","level":"info","event":"..     ...        ...                 ...     ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.359405Z","level":"info","event":"295  36432         99 2025-07-07 17:45:00  227.80   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.359625Z","level":"info","event":"296  36899         99 2025-07-08 07:00:00    0.33   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.359837Z","level":"info","event":"297  36795        100 2025-07-07 17:30:00  250.14   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.360053Z","level":"info","event":"298  36796        100 2025-07-07 17:45:00  250.43   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.360268Z","level":"info","event":"299  36900        100 2025-07-08 07:00:00    0.38   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.360509Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.360732Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.391968Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.392317Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.392545Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.392776Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:36.389848","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
