{"timestamp":"2025-07-14T02:25:37.743017","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:25:37.744292","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:25:37.827905Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.828169Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.828316Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.828451Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.781377","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:25:37.911092Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.911484Z","level":"info","event":"0    45501          1 2025-07-09 16:00:00   0.62   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.911775Z","level":"info","event":"1    45601          1 2025-07-09 16:15:00   0.62   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.911949Z","level":"info","event":"2    45701          1 2025-07-09 16:30:00   0.61   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.912141Z","level":"info","event":"3    45502          2 2025-07-09 16:00:00   0.51   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.912291Z","level":"info","event":"4    45602          2 2025-07-09 16:15:00   0.63   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.912443Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.912613Z","level":"info","event":"295  45699         99 2025-07-09 16:15:00   0.29   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.912762Z","level":"info","event":"296  45799         99 2025-07-09 16:30:00   0.32   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.912909Z","level":"info","event":"297  45600        100 2025-07-09 16:00:00   0.73   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.913116Z","level":"info","event":"298  45700        100 2025-07-09 16:15:00   0.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.913300Z","level":"info","event":"299  45800        100 2025-07-09 16:30:00   0.62   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.913476Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.913774Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.929003Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.929889","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:25:37.963645Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.963990Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:25:37.964189Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
