{"timestamp":"2025-07-14T01:16:34.942832","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:16:34.943604","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:16:34.990799Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:34.991052Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:34.991207Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:34.991385Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:34.967150","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:16:35.027615Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.027888Z","level":"info","event":"0    38601          1 2025-07-08 11:30:00   1.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028005Z","level":"info","event":"1    38701          1 2025-07-08 11:45:00   1.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028101Z","level":"info","event":"2    38801          1 2025-07-08 12:00:00   0.98   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028197Z","level":"info","event":"3    38602          2 2025-07-08 11:30:00   0.51   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028289Z","level":"info","event":"4    38702          2 2025-07-08 11:45:00   1.45   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028379Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028467Z","level":"info","event":"295  38799         99 2025-07-08 11:45:00   0.88   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028556Z","level":"info","event":"296  38899         99 2025-07-08 12:00:00   0.73   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028644Z","level":"info","event":"297  38700        100 2025-07-08 11:30:00   0.68   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028736Z","level":"info","event":"298  38800        100 2025-07-08 11:45:00   0.88   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028825Z","level":"info","event":"299  38900        100 2025-07-08 12:00:00   1.31   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.028914Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.029002Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.037329Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.038137","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:16:35.063918Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.064173Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:16:35.064331Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
