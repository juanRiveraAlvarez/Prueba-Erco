{"timestamp":"2025-07-14T02:20:36.965700","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:20:36.966440","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:20:37.011319Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.011521Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.011626Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.011722Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:36.991926","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:20:37.069484Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.069688Z","level":"info","event":"0    45001          1 2025-07-09 14:45:00   1.11   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.069803Z","level":"info","event":"1    45101          1 2025-07-09 15:00:00   0.86   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.069913Z","level":"info","event":"2    45201          1 2025-07-09 15:15:00   0.84   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070020Z","level":"info","event":"3    45002          2 2025-07-09 14:45:00   1.19   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070125Z","level":"info","event":"4    45102          2 2025-07-09 15:00:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070230Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070330Z","level":"info","event":"295  45199         99 2025-07-09 15:00:00   0.84   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070429Z","level":"info","event":"296  45299         99 2025-07-09 15:15:00   0.79   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070523Z","level":"info","event":"297  45100        100 2025-07-09 14:45:00   0.71   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070617Z","level":"info","event":"298  45200        100 2025-07-09 15:00:00   0.97   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070709Z","level":"info","event":"299  45300        100 2025-07-09 15:15:00   0.75   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070805Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.070903Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.088008Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.088578","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:20:37.113315Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.113531Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:20:37.113651Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
