{"timestamp":"2025-07-14T01:20:36.243096","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:20:36.243756","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:20:36.293230Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.293525Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.293684Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.293835Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.274737","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:20:36.368423Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.368708Z","level":"info","event":"0    39001          1 2025-07-08 12:30:00   0.54   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.368869Z","level":"info","event":"1    39101          1 2025-07-08 12:45:00   1.22   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.369014Z","level":"info","event":"2    39201          1 2025-07-08 13:00:00   1.42   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.369162Z","level":"info","event":"3    39002          2 2025-07-08 12:30:00   0.62   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.369303Z","level":"info","event":"4    39102          2 2025-07-08 12:45:00   0.70   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.369443Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.369585Z","level":"info","event":"295  39199         99 2025-07-08 12:45:00   1.48   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.369729Z","level":"info","event":"296  39299         99 2025-07-08 13:00:00   1.42   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.369871Z","level":"info","event":"297  39100        100 2025-07-08 12:30:00   1.42   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.370015Z","level":"info","event":"298  39200        100 2025-07-08 12:45:00   0.89   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.370158Z","level":"info","event":"299  39300        100 2025-07-08 13:00:00   1.33   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.370300Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.370443Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.393008Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.393281Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.393426Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.393557Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:20:36.391256","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
