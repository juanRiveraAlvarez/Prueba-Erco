{"timestamp":"2025-07-14T01:05:36.218132","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:05:36.218834","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:05:36.269313Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.269539Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.269673Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.269799Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.244666","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:05:36.323538Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.323788Z","level":"info","event":"0    37501          1 2025-07-08 08:45:00   0.42   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.323904Z","level":"info","event":"1    37601          1 2025-07-08 09:00:00   0.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324011Z","level":"info","event":"2    37701          1 2025-07-08 09:15:00   0.52   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324116Z","level":"info","event":"3    37502          2 2025-07-08 08:45:00   0.31   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324218Z","level":"info","event":"4    37602          2 2025-07-08 09:00:00   0.63   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324317Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324415Z","level":"info","event":"295  37699         99 2025-07-08 09:00:00   0.77   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324515Z","level":"info","event":"296  37799         99 2025-07-08 09:15:00   0.86   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324614Z","level":"info","event":"297  37600        100 2025-07-08 08:45:00   0.40   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324712Z","level":"info","event":"298  37700        100 2025-07-08 09:00:00   0.78   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324809Z","level":"info","event":"299  37800        100 2025-07-08 09:15:00   0.55   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.324907Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.325005Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.338161Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.339057","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:05:36.376122Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.376391Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:05:36.376522Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
