{"timestamp":"2025-07-13T00:23:38.821773","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:23:38.822675","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:23:38.875176Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.875485Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.875676Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.875860Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.855993","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:23:38.948653Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.948937Z","level":"info","event":"0    232284          1 2025-07-08 10:30:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.949092Z","level":"info","event":"1    232384          1 2025-07-08 10:45:00   1.22   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.949264Z","level":"info","event":"2    232484          1 2025-07-08 11:00:00   0.50   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.949464Z","level":"info","event":"3    232285          2 2025-07-08 10:30:00   0.00   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.949657Z","level":"info","event":"4    232385          2 2025-07-08 10:45:00   0.56   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.949865Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.950070Z","level":"info","event":"295  232482         99 2025-07-08 10:45:00   0.60   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.950280Z","level":"info","event":"296  232582         99 2025-07-08 11:00:00   1.45   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.950485Z","level":"info","event":"297  232383        100 2025-07-08 10:30:00   1.29   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.950680Z","level":"info","event":"298  232483        100 2025-07-08 10:45:00   0.76   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.950877Z","level":"info","event":"299  232583        100 2025-07-08 11:00:00   0.65   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.951076Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.951269Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.963922Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.964692","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:23:38.995388Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.995663Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:23:38.995843Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
