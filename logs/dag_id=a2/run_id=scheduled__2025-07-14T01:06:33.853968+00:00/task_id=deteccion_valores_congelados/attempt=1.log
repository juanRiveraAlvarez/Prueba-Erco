{"timestamp":"2025-07-14T01:06:35.457102","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:06:35.457719","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:06:35.513384Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.513607Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.513753Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.513885Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.485170","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:06:35.567201Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.567494Z","level":"info","event":"0    37601          1 2025-07-08 09:00:00   0.38   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.567664Z","level":"info","event":"1    37701          1 2025-07-08 09:15:00   0.52   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.567820Z","level":"info","event":"2    37801          1 2025-07-08 09:30:00   0.82   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.567985Z","level":"info","event":"3    37602          2 2025-07-08 09:00:00   0.63   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.568137Z","level":"info","event":"4    37702          2 2025-07-08 09:15:00   0.78   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.568290Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.568445Z","level":"info","event":"295  37799         99 2025-07-08 09:15:00   0.86   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.568598Z","level":"info","event":"296  37899         99 2025-07-08 09:30:00   0.58   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.568748Z","level":"info","event":"297  37700        100 2025-07-08 09:00:00   0.78   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.568899Z","level":"info","event":"298  37800        100 2025-07-08 09:15:00   0.55   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.569056Z","level":"info","event":"299  37900        100 2025-07-08 09:30:00   0.48   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.569215Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.569369Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.582751Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.584282","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:06:35.615649Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.615893Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:06:35.616035Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
