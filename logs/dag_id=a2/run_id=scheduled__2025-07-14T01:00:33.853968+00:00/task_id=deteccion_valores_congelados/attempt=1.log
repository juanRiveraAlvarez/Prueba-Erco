{"timestamp":"2025-07-14T01:00:35.621810","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:00:35.622593","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:00:35.673623Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.673908Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.674059Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.674201Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.650630","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:00:35.732138Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.732353Z","level":"info","event":"0    37001          1 2025-07-08 07:30:00   0.23   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.732467Z","level":"info","event":"1    37101          1 2025-07-08 07:45:00   0.25   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.732571Z","level":"info","event":"2    37201          1 2025-07-08 08:00:00   0.34   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.732680Z","level":"info","event":"3    37002          2 2025-07-08 07:30:00   0.35   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.732782Z","level":"info","event":"4    37102          2 2025-07-08 07:45:00   0.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.732881Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.732987Z","level":"info","event":"295  37199         99 2025-07-08 07:45:00   0.28   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.733129Z","level":"info","event":"296  37299         99 2025-07-08 08:00:00   0.40   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.733265Z","level":"info","event":"297  37100        100 2025-07-08 07:30:00   0.33   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.733410Z","level":"info","event":"298  37200        100 2025-07-08 07:45:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.733549Z","level":"info","event":"299  37300        100 2025-07-08 08:00:00   0.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.733693Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.733837Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.745065Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.745989","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:00:35.773014Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.773248Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:00:35.773382Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
