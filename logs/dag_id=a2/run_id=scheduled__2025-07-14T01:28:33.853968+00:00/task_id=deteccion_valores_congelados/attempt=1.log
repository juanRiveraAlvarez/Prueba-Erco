{"timestamp":"2025-07-14T01:28:35.828011","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:28:35.828629","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:28:35.874800Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.875020Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.875142Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.875259Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.852962","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:28:35.924295Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.924580Z","level":"info","event":"0    39801          1 2025-07-08 14:30:00   0.66   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.924756Z","level":"info","event":"1    39901          1 2025-07-08 14:45:00   1.08   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.924913Z","level":"info","event":"2    40001          1 2025-07-08 15:00:00   0.36   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.925070Z","level":"info","event":"3    39802          2 2025-07-08 14:30:00   0.49   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.925220Z","level":"info","event":"4    39902          2 2025-07-08 14:45:00   0.80   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.925366Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.925511Z","level":"info","event":"295  39999         99 2025-07-08 14:45:00   1.02   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.925654Z","level":"info","event":"296  40099         99 2025-07-08 15:00:00   0.94   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.925797Z","level":"info","event":"297  39900        100 2025-07-08 14:30:00   1.12   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.925940Z","level":"info","event":"298  40000        100 2025-07-08 14:45:00   0.69   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.926082Z","level":"info","event":"299  40100        100 2025-07-08 15:00:00   0.90   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.926226Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.926369Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.937057Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.938013","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:28:35.960718Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.960941Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:28:35.961087Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
