{"timestamp":"2025-07-13T00:24:39.364046","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-13T00:24:39.365568","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-13T00:24:39.441713Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.442006Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.442162Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.442306Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.409004","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-13T00:24:39.546807Z","level":"info","event":"         id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.547196Z","level":"info","event":"0    232384          1 2025-07-08 10:45:00   1.22   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.547479Z","level":"info","event":"1    232484          1 2025-07-08 11:00:00   0.50   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.547729Z","level":"info","event":"2    232584          1 2025-07-08 11:15:00   1.01   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.547977Z","level":"info","event":"3    232385          2 2025-07-08 10:45:00   0.56   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.548216Z","level":"info","event":"4    232485          2 2025-07-08 11:00:00   1.23   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.548458Z","level":"info","event":"..      ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.548699Z","level":"info","event":"295  232582         99 2025-07-08 11:00:00   1.45   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.548933Z","level":"info","event":"296  232682         99 2025-07-08 11:15:00   0.00   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.549206Z","level":"info","event":"297  232483        100 2025-07-08 10:45:00   0.76   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.549451Z","level":"info","event":"298  232583        100 2025-07-08 11:00:00   0.65   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.549685Z","level":"info","event":"299  232683        100 2025-07-08 11:15:00   1.22   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.549920Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.550146Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.572514Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.574226","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-13T00:24:39.611050Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.611347Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-13T00:24:39.611526Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
