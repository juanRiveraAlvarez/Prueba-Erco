{"timestamp":"2025-07-14T00:48:45.314606","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T00:48:45.316398","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T00:48:45.406101Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.407402Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.408471Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.409538Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.373197","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T00:48:45.454277Z","level":"info","event":"        id  device_id           timestamp   value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.454633Z","level":"info","event":"0      358          1 2025-07-07 17:15:00  216.65   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.454851Z","level":"info","event":"1      359          1 2025-07-07 17:30:00  216.95   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.455056Z","level":"info","event":"2      360          1 2025-07-07 17:45:00  217.30   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.455300Z","level":"info","event":"3      722          2 2025-07-07 17:15:00  235.13   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.455533Z","level":"info","event":"4      723          2 2025-07-07 17:30:00  235.29   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.455736Z","level":"info","event":"..     ...        ...                 ...     ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.455947Z","level":"info","event":"115  14191         39 2025-07-07 17:30:00  218.63   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.456159Z","level":"info","event":"116  14192         39 2025-07-07 17:45:00  218.81   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.456357Z","level":"info","event":"117  14274         40 2025-07-02 12:15:00   65.28   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.456573Z","level":"info","event":"118  14275         40 2025-07-02 12:30:00   66.78   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.456783Z","level":"info","event":"119  14276         40 2025-07-02 12:45:00   67.29   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.456978Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.457321Z","level":"info","event":"[120 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.470495Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.470827Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.471024Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.471207Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:48:45.468577","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
