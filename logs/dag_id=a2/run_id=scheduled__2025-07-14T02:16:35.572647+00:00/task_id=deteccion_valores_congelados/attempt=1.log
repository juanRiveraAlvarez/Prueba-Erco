{"timestamp":"2025-07-14T02:16:37.514554","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:16:37.515575","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:16:37.584037Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.584267Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.584397Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.584519Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.549263","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:16:37.636801Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.637056Z","level":"info","event":"0    44601          1 2025-07-09 13:45:00   1.15   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.637189Z","level":"info","event":"1    44701          1 2025-07-09 14:00:00   0.53   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.637320Z","level":"info","event":"2    44801          1 2025-07-09 14:15:00   0.45   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.637434Z","level":"info","event":"3    44602          2 2025-07-09 13:45:00   1.33   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.637555Z","level":"info","event":"4    44702          2 2025-07-09 14:00:00   0.88   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.637675Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.637791Z","level":"info","event":"295  44799         99 2025-07-09 14:00:00   0.90   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.637916Z","level":"info","event":"296  44899         99 2025-07-09 14:15:00   0.54   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.638039Z","level":"info","event":"297  44700        100 2025-07-09 13:45:00   0.94   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.638166Z","level":"info","event":"298  44800        100 2025-07-09 14:00:00   1.17   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.638288Z","level":"info","event":"299  44900        100 2025-07-09 14:15:00   0.59   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.638413Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.638627Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.648885Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.649743","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:16:37.675521Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.675749Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:16:37.675866Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
