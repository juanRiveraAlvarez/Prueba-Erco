{"timestamp":"2025-07-14T01:52:37.988376","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:52:37.989225","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:52:38.040406Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.040657Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.040811Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.040953Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.017864","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:52:38.116728Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.116971Z","level":"info","event":"0    42301          1 2025-07-09 08:00:00   0.72   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117104Z","level":"info","event":"1    42401          1 2025-07-09 08:15:00   0.25   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117222Z","level":"info","event":"2    42501          1 2025-07-09 08:30:00   0.61   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117338Z","level":"info","event":"3    42302          2 2025-07-09 08:00:00   0.70   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117451Z","level":"info","event":"4    42402          2 2025-07-09 08:15:00   0.41   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117562Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117672Z","level":"info","event":"295  42399         99 2025-07-09 08:00:00   0.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117781Z","level":"info","event":"296  42499         99 2025-07-09 08:15:00   0.34   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117890Z","level":"info","event":"297  42300        100 2025-07-09 07:45:00   0.23   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.117999Z","level":"info","event":"298  42400        100 2025-07-09 08:00:00   0.43   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.118107Z","level":"info","event":"299  42500        100 2025-07-09 08:15:00   0.32   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.118217Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.118327Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.132113Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.133169","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:52:38.160333Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.160564Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:52:38.160703Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
