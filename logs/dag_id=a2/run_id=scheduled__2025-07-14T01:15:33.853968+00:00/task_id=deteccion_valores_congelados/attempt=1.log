{"timestamp":"2025-07-14T01:15:36.498630","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:15:36.499503","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:15:36.558344Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.558577Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.558710Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.558838Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.532600","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:15:36.632449Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.632694Z","level":"info","event":"0    38501          1 2025-07-08 11:15:00   0.63   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.632829Z","level":"info","event":"1    38601          1 2025-07-08 11:30:00   1.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.632951Z","level":"info","event":"2    38701          1 2025-07-08 11:45:00   1.42   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633073Z","level":"info","event":"3    38502          2 2025-07-08 11:15:00   1.29   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633188Z","level":"info","event":"4    38602          2 2025-07-08 11:30:00   0.51   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633301Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633412Z","level":"info","event":"295  38699         99 2025-07-08 11:30:00   1.37   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633524Z","level":"info","event":"296  38799         99 2025-07-08 11:45:00   0.88   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633634Z","level":"info","event":"297  38600        100 2025-07-08 11:15:00   0.96   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633745Z","level":"info","event":"298  38700        100 2025-07-08 11:30:00   0.68   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633855Z","level":"info","event":"299  38800        100 2025-07-08 11:45:00   0.88   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.633967Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.634080Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.649722Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.650761","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:15:36.685341Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.685587Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:15:36.685744Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
