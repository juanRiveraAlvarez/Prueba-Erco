{"timestamp":"2025-07-14T01:02:35.481088","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:02:35.481814","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:02:35.534686Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.534941Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.535094Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.535242Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.508574","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:02:35.588470Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.588680Z","level":"info","event":"0    37201          1 2025-07-08 08:00:00   0.34   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.588814Z","level":"info","event":"1    37301          1 2025-07-08 08:15:00   0.00   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.588915Z","level":"info","event":"2    37401          1 2025-07-08 08:30:00   0.63   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589013Z","level":"info","event":"3    37202          2 2025-07-08 08:00:00   0.37   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589106Z","level":"info","event":"4    37302          2 2025-07-08 08:15:00   0.67   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589198Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589289Z","level":"info","event":"295  37399         99 2025-07-08 08:15:00   0.28   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589379Z","level":"info","event":"296  37499         99 2025-07-08 08:30:00   0.58   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589469Z","level":"info","event":"297  37300        100 2025-07-08 08:00:00   0.36   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589559Z","level":"info","event":"298  37400        100 2025-07-08 08:15:00   0.51   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589650Z","level":"info","event":"299  37500        100 2025-07-08 08:30:00   0.26   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589753Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.589858Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.602830Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.603737","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:02:35.628627Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.628849Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:02:35.628975Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
