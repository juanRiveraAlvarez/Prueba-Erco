{"timestamp":"2025-07-14T01:17:36.242494","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:17:36.243399","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:17:36.290959Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.291216Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.291419Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.291585Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.272625","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:17:36.342847Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.343127Z","level":"info","event":"0    38701          1 2025-07-08 11:45:00   1.42   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.343294Z","level":"info","event":"1    38801          1 2025-07-08 12:00:00   0.98   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.343422Z","level":"info","event":"2    38901          1 2025-07-08 12:15:00   1.47   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.343542Z","level":"info","event":"3    38702          2 2025-07-08 11:45:00   1.45   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.343657Z","level":"info","event":"4    38802          2 2025-07-08 12:00:00   0.66   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.343769Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.343879Z","level":"info","event":"295  38899         99 2025-07-08 12:00:00   0.73   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.343989Z","level":"info","event":"296  38999         99 2025-07-08 12:15:00   1.16   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.344098Z","level":"info","event":"297  38800        100 2025-07-08 11:45:00   0.88   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.344207Z","level":"info","event":"298  38900        100 2025-07-08 12:00:00   1.31   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.344338Z","level":"info","event":"299  39000        100 2025-07-08 12:15:00   0.55   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.344449Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.344559Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.353122Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.354138","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:17:36.378979Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.379235Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:17:36.379442Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
