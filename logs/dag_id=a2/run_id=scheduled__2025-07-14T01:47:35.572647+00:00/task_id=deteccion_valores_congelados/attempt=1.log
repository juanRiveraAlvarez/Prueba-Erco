{"timestamp":"2025-07-14T01:47:37.045241","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:47:37.046240","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:47:37.104010Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.104302Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.104501Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.104696Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.076816","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:47:37.163221Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.163497Z","level":"info","event":"0    41001          1 2025-07-08 17:30:00   0.23   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.163654Z","level":"info","event":"1    41101          1 2025-07-08 17:45:00   0.32   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.163803Z","level":"info","event":"2    41901          1 2025-07-09 07:00:00   0.13   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.163954Z","level":"info","event":"3    41002          2 2025-07-08 17:30:00   0.18   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.164097Z","level":"info","event":"4    41102          2 2025-07-08 17:45:00   0.32   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.164240Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.164382Z","level":"info","event":"295  41199         99 2025-07-08 17:45:00   0.29   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.164525Z","level":"info","event":"296  41999         99 2025-07-09 07:00:00   0.39   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.164660Z","level":"info","event":"297  41100        100 2025-07-08 17:30:00   0.13   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.164798Z","level":"info","event":"298  41200        100 2025-07-08 17:45:00   0.23   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.164925Z","level":"info","event":"299  42000        100 2025-07-09 07:00:00   0.17   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.165034Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.165128Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.178085Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.179349","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:47:37.209225Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.209557Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:47:37.209774Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
