{"timestamp":"2025-07-14T01:25:36.515103","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:25:36.518797","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:25:36.577783Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.578112Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.578325Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.578516Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.552204","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:25:36.665669Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.665937Z","level":"info","event":"0    39501          1 2025-07-08 13:45:00   1.36   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.666098Z","level":"info","event":"1    39601          1 2025-07-08 14:00:00   0.59   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.666237Z","level":"info","event":"2    39701          1 2025-07-08 14:15:00   0.89   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.666374Z","level":"info","event":"3    39502          2 2025-07-08 13:45:00   0.81   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.666509Z","level":"info","event":"4    39602          2 2025-07-08 14:00:00   1.18   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.666640Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.666772Z","level":"info","event":"295  39699         99 2025-07-08 14:00:00   0.67   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.666903Z","level":"info","event":"296  39799         99 2025-07-08 14:15:00   1.08   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.667027Z","level":"info","event":"297  39600        100 2025-07-08 13:45:00   1.24   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.667160Z","level":"info","event":"298  39700        100 2025-07-08 14:00:00   0.58   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.667315Z","level":"info","event":"299  39800        100 2025-07-08 14:15:00   1.17   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.667449Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.667578Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.693250Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.693451","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:25:36.726987Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.727206Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:25:36.727382Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
