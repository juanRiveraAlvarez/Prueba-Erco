{"timestamp":"2025-07-14T01:59:36.698873","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:59:36.699765","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:59:36.754309Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.754534Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.754667Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.754788Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.723449","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:59:36.789333Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.789553Z","level":"info","event":"0    42901          1 2025-07-09 09:30:00   0.75   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.789676Z","level":"info","event":"1    43001          1 2025-07-09 09:45:00   0.78   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.789792Z","level":"info","event":"2    43101          1 2025-07-09 10:00:00   1.11   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.789910Z","level":"info","event":"3    42902          2 2025-07-09 09:30:00   0.83   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790035Z","level":"info","event":"4    43002          2 2025-07-09 09:45:00   0.78   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790150Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790263Z","level":"info","event":"295  43099         99 2025-07-09 09:45:00   0.60   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790375Z","level":"info","event":"296  43199         99 2025-07-09 10:00:00   1.09   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790490Z","level":"info","event":"297  43000        100 2025-07-09 09:30:00   0.70   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790603Z","level":"info","event":"298  43100        100 2025-07-09 09:45:00   0.52   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790717Z","level":"info","event":"299  43200        100 2025-07-09 10:00:00   0.67   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790861Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.790999Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.800066Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.800944","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:59:36.827771Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.828064Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:59:36.828255Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
