{"timestamp":"2025-07-14T01:32:35.743871","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:32:35.744557","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:32:35.788846Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.789049Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.789154Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.789283Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.771059","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:32:35.841155Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.841412Z","level":"info","event":"0    40201          1 2025-07-08 15:30:00   0.92   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.841578Z","level":"info","event":"1    40301          1 2025-07-08 15:45:00   1.04   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.841684Z","level":"info","event":"2    40401          1 2025-07-08 16:00:00   0.53   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.841790Z","level":"info","event":"3    40202          2 2025-07-08 15:30:00   0.66   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.841888Z","level":"info","event":"4    40302          2 2025-07-08 15:45:00   1.05   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.841984Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.842079Z","level":"info","event":"295  40399         99 2025-07-08 15:45:00   0.86   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.842173Z","level":"info","event":"296  40499         99 2025-07-08 16:00:00   0.63   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.842267Z","level":"info","event":"297  40300        100 2025-07-08 15:30:00   0.90   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.842362Z","level":"info","event":"298  40400        100 2025-07-08 15:45:00   0.77   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.842462Z","level":"info","event":"299  40500        100 2025-07-08 16:00:00   0.40   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.842607Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.842770Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.852390Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.853266","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:32:35.878012Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.878227Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:32:35.878352Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
