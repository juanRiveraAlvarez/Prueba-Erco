{"timestamp":"2025-07-14T01:38:36.307353","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:38:36.308446","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:38:36.377021Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.377388Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.377620Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.377838Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.340021","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:38:36.439387Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.439749Z","level":"info","event":"0    40801          1 2025-07-08 17:00:00   0.17   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.439987Z","level":"info","event":"1    40901          1 2025-07-08 17:15:00   0.30   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.440198Z","level":"info","event":"2    41001          1 2025-07-08 17:30:00   0.23   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.440411Z","level":"info","event":"3    40802          2 2025-07-08 17:00:00   2.87   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.440616Z","level":"info","event":"4    40902          2 2025-07-08 17:15:00   0.22   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.440814Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.441012Z","level":"info","event":"295  40999         99 2025-07-08 17:15:00   0.27   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.441213Z","level":"info","event":"296  41099         99 2025-07-08 17:30:00   0.20   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.441483Z","level":"info","event":"297  40900        100 2025-07-08 17:00:00   0.27   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.441700Z","level":"info","event":"298  41000        100 2025-07-08 17:15:00   0.29   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.442180Z","level":"info","event":"299  41100        100 2025-07-08 17:30:00   0.13   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.442398Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.442596Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.458756Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.459825","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:38:36.491662Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.491996Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:38:36.492392Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
