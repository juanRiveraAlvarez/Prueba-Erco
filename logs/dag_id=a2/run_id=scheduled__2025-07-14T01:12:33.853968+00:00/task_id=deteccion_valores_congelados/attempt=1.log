{"timestamp":"2025-07-14T01:12:36.535816","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:12:36.536512","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:12:36.587836Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.588107Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.588288Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.588433Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.567783","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:12:36.653645Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.653871Z","level":"info","event":"0    38201          1 2025-07-08 10:30:00   1.06   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.653992Z","level":"info","event":"1    38301          1 2025-07-08 10:45:00   1.04   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.654097Z","level":"info","event":"2    38401          1 2025-07-08 11:00:00   0.57   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.654216Z","level":"info","event":"3    38202          2 2025-07-08 10:30:00   1.07   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.654358Z","level":"info","event":"4    38302          2 2025-07-08 10:45:00   0.59   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.654495Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.654653Z","level":"info","event":"295  38399         99 2025-07-08 10:45:00   0.80   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.654800Z","level":"info","event":"296  38499         99 2025-07-08 11:00:00   0.54   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.654912Z","level":"info","event":"297  38300        100 2025-07-08 10:30:00   0.60   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.655017Z","level":"info","event":"298  38400        100 2025-07-08 10:45:00   0.54   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.655120Z","level":"info","event":"299  38500        100 2025-07-08 11:00:00   1.01   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.655226Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.655359Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.667151Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.668230","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:12:36.695809Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.696082Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:12:36.696248Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
