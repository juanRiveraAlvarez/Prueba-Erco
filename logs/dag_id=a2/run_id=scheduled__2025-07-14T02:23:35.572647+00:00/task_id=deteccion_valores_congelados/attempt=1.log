{"timestamp":"2025-07-14T02:23:36.970878","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T02:23:36.971792","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T02:23:37.027570Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.027885Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.028088Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.028265Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.003574","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T02:23:37.106443Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.106683Z","level":"info","event":"0    45301          1 2025-07-09 15:30:00   0.85   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.106814Z","level":"info","event":"1    45401          1 2025-07-09 15:45:00   0.39   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.106933Z","level":"info","event":"2    45501          1 2025-07-09 16:00:00   0.62   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107052Z","level":"info","event":"3    45302          2 2025-07-09 15:30:00   0.74   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107166Z","level":"info","event":"4    45402          2 2025-07-09 15:45:00   0.47   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107305Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107426Z","level":"info","event":"295  45499         99 2025-07-09 15:45:00   0.66   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107538Z","level":"info","event":"296  45599         99 2025-07-09 16:00:00   0.65   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107649Z","level":"info","event":"297  45400        100 2025-07-09 15:30:00   0.86   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107761Z","level":"info","event":"298  45500        100 2025-07-09 15:45:00   0.84   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107872Z","level":"info","event":"299  45600        100 2025-07-09 16:00:00   0.73   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.107983Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.108098Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.122682Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.123642","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T02:23:37.152349Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.152628Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T02:23:37.152808Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
