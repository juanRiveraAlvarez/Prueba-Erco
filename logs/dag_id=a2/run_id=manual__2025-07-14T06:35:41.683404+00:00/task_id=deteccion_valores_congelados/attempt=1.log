{"timestamp":"2025-07-14T06:35:43.717755","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T06:35:43.719394","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T06:35:43.801313Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.801668Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.801897Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.802069Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.774531","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T06:35:43.899906Z","level":"info","event":"         id  device_id           timestamp   value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.900211Z","level":"info","event":"0     85458          1 2025-07-07 17:15:00  230.93   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.900396Z","level":"info","event":"1     85459          1 2025-07-07 17:30:00  231.19   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.900567Z","level":"info","event":"2     85460          1 2025-07-07 17:45:00  231.38   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.900753Z","level":"info","event":"3     85822          2 2025-07-07 17:15:00  211.98   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.900978Z","level":"info","event":"4     85823          2 2025-07-07 17:30:00  212.15   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.901172Z","level":"info","event":"..      ...        ...                 ...     ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.901361Z","level":"info","event":"295  121131         99 2025-07-07 17:30:00  222.61   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.901551Z","level":"info","event":"296  121132         99 2025-07-07 17:45:00  222.89   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.901761Z","level":"info","event":"297  121494        100 2025-07-07 17:15:00  215.06   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.901958Z","level":"info","event":"298  121495        100 2025-07-07 17:30:00  215.41   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.902149Z","level":"info","event":"299  121496        100 2025-07-07 17:45:00  215.67   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.902824Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.903058Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.937133Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.937455Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.937642Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.937805Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T06:35:43.935234","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
