{"timestamp":"2025-07-14T01:19:36.073809","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T01:19:36.074721","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T01:19:36.129716Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.129954Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.130093Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.130226Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.106111","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T01:19:36.199802Z","level":"info","event":"        id  device_id           timestamp  value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.200075Z","level":"info","event":"0    38901          1 2025-07-08 12:15:00   1.47   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.200231Z","level":"info","event":"1    39001          1 2025-07-08 12:30:00   0.54   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.200405Z","level":"info","event":"2    39101          1 2025-07-08 12:45:00   1.22   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.200574Z","level":"info","event":"3    38902          2 2025-07-08 12:15:00   0.52   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.200741Z","level":"info","event":"4    39002          2 2025-07-08 12:30:00   0.62   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.200911Z","level":"info","event":"..     ...        ...                 ...    ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.201083Z","level":"info","event":"295  39099         99 2025-07-08 12:30:00   1.41   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.201245Z","level":"info","event":"296  39199         99 2025-07-08 12:45:00   1.48   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.201411Z","level":"info","event":"297  39000        100 2025-07-08 12:15:00   0.55   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.201574Z","level":"info","event":"298  39100        100 2025-07-08 12:30:00   1.42   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.201739Z","level":"info","event":"299  39200        100 2025-07-08 12:45:00   0.89   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.201910Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.202102Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.217775Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.218997","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T01:19:36.250711Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.250992Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T01:19:36.251179Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
