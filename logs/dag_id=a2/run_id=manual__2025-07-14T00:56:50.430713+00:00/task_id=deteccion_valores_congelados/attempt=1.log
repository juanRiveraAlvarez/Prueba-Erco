{"timestamp":"2025-07-14T00:56:52.204969","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-14T00:56:52.205852","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_analisis.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-14T00:56:52.247313Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.247520Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.247614Z","level":"info","event":"Current task name:deteccion_valores_congelados","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.247699Z","level":"info","event":"Dag name:a2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.232583","level":"warning","event":"/opt/airflow/dags/dag_analisis.py:69: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, conn)\n","logger":"py.warnings"}
{"timestamp":"2025-07-14T00:56:52.295004Z","level":"info","event":"        id  device_id           timestamp   value  rn","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295206Z","level":"info","event":"0      360          1 2025-07-07 17:45:00  217.30   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295330Z","level":"info","event":"1    36801          1 2025-07-08 07:00:00    0.21   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295426Z","level":"info","event":"2    36901          1 2025-07-08 07:15:00    0.26   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295521Z","level":"info","event":"3      724          2 2025-07-07 17:45:00  235.64   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295611Z","level":"info","event":"4    36802          2 2025-07-08 07:00:00    0.29   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295699Z","level":"info","event":"..     ...        ...                 ...     ...  ..","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295787Z","level":"info","event":"295  36899         99 2025-07-08 07:00:00    0.33   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295873Z","level":"info","event":"296  36999         99 2025-07-08 07:15:00    0.24   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.295960Z","level":"info","event":"297  36796        100 2025-07-07 17:45:00  250.43   3","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.296046Z","level":"info","event":"298  36900        100 2025-07-08 07:00:00    0.38   2","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.296133Z","level":"info","event":"299  37000        100 2025-07-08 07:15:00    0.26   1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.296219Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.296306Z","level":"info","event":"[300 rows x 5 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.304587Z","level":"info","event":"todo bien","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.305398","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-14T00:56:52.331869Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.332105Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-14T00:56:52.332252Z","level":"info","event":"Task operator:<Task(PythonOperator): deteccion_valores_congelados>","chan":"stdout","logger":"task"}
